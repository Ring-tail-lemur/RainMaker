{"version":3,"file":"keyVaultClient.js","sourceRoot":"","sources":["../../../../src/generated/keyVaultClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\nimport {\n  KeyVaultClientOptionalParams,\n  ApiVersion73,\n  JsonWebKeyType,\n  CreateKeyOptionalParams,\n  CreateKeyResponse,\n  RotateKeyOptionalParams,\n  RotateKeyResponse,\n  JsonWebKey,\n  ImportKeyOptionalParams,\n  ImportKeyResponse,\n  DeleteKeyOptionalParams,\n  DeleteKeyResponse,\n  UpdateKeyOptionalParams,\n  UpdateKeyResponse,\n  GetKeyOptionalParams,\n  GetKeyResponse,\n  GetKeyVersionsOptionalParams,\n  GetKeyVersionsResponse,\n  GetKeysOptionalParams,\n  GetKeysResponse,\n  BackupKeyOptionalParams,\n  BackupKeyResponse,\n  RestoreKeyOptionalParams,\n  RestoreKeyResponse,\n  JsonWebKeyEncryptionAlgorithm,\n  EncryptOptionalParams,\n  EncryptResponse,\n  DecryptOptionalParams,\n  DecryptResponse,\n  JsonWebKeySignatureAlgorithm,\n  SignOptionalParams,\n  SignResponse,\n  VerifyOptionalParams,\n  VerifyResponse,\n  WrapKeyOptionalParams,\n  WrapKeyResponse,\n  UnwrapKeyOptionalParams,\n  UnwrapKeyResponse,\n  ReleaseOptionalParams,\n  ReleaseResponse,\n  GetDeletedKeysOptionalParams,\n  GetDeletedKeysResponse,\n  GetDeletedKeyOptionalParams,\n  GetDeletedKeyResponse,\n  PurgeDeletedKeyOptionalParams,\n  RecoverDeletedKeyOptionalParams,\n  RecoverDeletedKeyResponse,\n  GetKeyRotationPolicyOptionalParams,\n  GetKeyRotationPolicyResponse,\n  KeyRotationPolicy,\n  UpdateKeyRotationPolicyOptionalParams,\n  UpdateKeyRotationPolicyResponse,\n  GetRandomBytesOptionalParams,\n  GetRandomBytesResponse,\n  GetKeyVersionsNextOptionalParams,\n  GetKeyVersionsNextResponse,\n  GetKeysNextOptionalParams,\n  GetKeysNextResponse,\n  GetDeletedKeysNextOptionalParams,\n  GetDeletedKeysNextResponse\n} from \"./models\";\n\nexport class KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    apiVersion: ApiVersion73,\n    options?: KeyVaultClientOptionalParams\n  ) {\n    super(apiVersion, options);\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType.\n   * @param options The options parameters.\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: JsonWebKeyType,\n    options?: CreateKeyOptionalParams\n  ): Promise<CreateKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      kty,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      createKeyOperationSpec\n    ) as Promise<CreateKeyResponse>;\n  }\n\n  /**\n   * The operation will rotate the key based on the key policy. It requires the keys/rotate permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to be rotated. The system will generate a new version in the\n   *                specified key.\n   * @param options The options parameters.\n   */\n  rotateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: RotateKeyOptionalParams\n  ): Promise<RotateKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      rotateKeyOperationSpec\n    ) as Promise<RotateKeyResponse>;\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the named\n   * key already exists, Azure Key Vault creates a new version of the key. This operation requires the\n   * keys/import permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param options The options parameters.\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: JsonWebKey,\n    options?: ImportKeyOptionalParams\n  ): Promise<ImportKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      key,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      importKeyOperationSpec\n    ) as Promise<ImportKeyResponse>;\n  }\n\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable for\n   * Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The options parameters.\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: DeleteKeyOptionalParams\n  ): Promise<DeleteKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      deleteKeyOperationSpec\n    ) as Promise<DeleteKeyResponse>;\n  }\n\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the keys/update\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The options parameters.\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: UpdateKeyOptionalParams\n  ): Promise<UpdateKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      updateKeyOperationSpec\n    ) as Promise<UpdateKeyResponse>;\n  }\n\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no key\n   * material is released in the response. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI\n   *                   fragment is optional. If not specified, the latest version of the key is returned.\n   * @param options The options parameters.\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: GetKeyOptionalParams\n  ): Promise<GetKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyOperationSpec\n    ) as Promise<GetKeyResponse>;\n  }\n\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation requires\n   * the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetKeyVersionsOptionalParams\n  ): Promise<GetKeyVersionsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyVersionsOperationSpec\n    ) as Promise<GetKeyVersionsResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base key\n   * identifier, attributes, and tags are provided in the response. Individual versions of a key are not\n   * listed in the response. This operation requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options?: GetKeysOptionalParams\n  ): Promise<GetKeysResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeysOperationSpec\n    ) as Promise<GetKeysResponse>;\n  }\n\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault\n   * itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault\n   * instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP\n   * operation may be used to export, in protected form, any key type from Azure Key Vault. Individual\n   * versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical\n   * boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another\n   * geographical area. For example, a backup from the US geographical area cannot be restored in an EU\n   * geographical area. This operation requires the key/backup permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: BackupKeyOptionalParams\n  ): Promise<BackupKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      backupKeyOperationSpec\n    ) as Promise<BackupKeyResponse>;\n  }\n\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety\n   * with the same key name as it had when it was backed up. If the key name is not available in the\n   * target Key Vault, the RESTORE operation will be rejected. While the key name is retained during\n   * restore, the final key identifier will change if the key is restored to a different vault. Restore\n   * will restore all versions and preserve version identifiers. The RESTORE operation is subject to\n   * security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as\n   * the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation\n   * requires the keys/restore permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The options parameters.\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: RestoreKeyOptionalParams\n  ): Promise<RestoreKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyBundleBackup,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      restoreKeyOperationSpec\n    ) as Promise<RestoreKeyResponse>;\n  }\n\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored\n   * in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size\n   * of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT\n   * operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection\n   * with an asymmetric key can be performed using public portion of the key. This operation is supported\n   * for asymmetric keys as a convenience for callers that have a key-reference but do not have access to\n   * the public key material. This operation requires the keys/encrypt permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: EncryptOptionalParams\n  ): Promise<EncryptResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      encryptOperationSpec\n    ) as Promise<EncryptResponse>;\n  }\n\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and\n   * specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of\n   * data may be decrypted, the size of this block is dependent on the target key and the algorithm to be\n   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since\n   * it uses the private portion of the key. This operation requires the keys/decrypt permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: DecryptOptionalParams\n  ): Promise<DecryptResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      decryptOperationSpec\n    ) as Promise<DecryptResponse>;\n  }\n\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since\n   * this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   *                  algorithm types, see JsonWebKeySignatureAlgorithm.\n   * @param value\n   * @param options The options parameters.\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: SignOptionalParams\n  ): Promise<SignResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      signOperationSpec\n    ) as Promise<SignResponse>;\n  }\n\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be\n   * performed using the public portion of the key but this operation is supported as a convenience for\n   * callers that only have a key-reference and not the public portion of the key. This operation\n   * requires the keys/verify permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   *                  types, see JsonWebKeySignatureAlgorithm.\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The options parameters.\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: VerifyOptionalParams\n  ): Promise<VerifyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      digest,\n      signature,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      verifyOperationSpec\n    ) as Promise<VerifyResponse>;\n  }\n\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed\n   * using the public portion of the key. This operation is supported for asymmetric keys as a\n   * convenience for callers that have a key-reference but do not have access to the public key material.\n   * This operation requires the keys/wrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: WrapKeyOptionalParams\n  ): Promise<WrapKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      wrapKeyOperationSpec\n    ) as Promise<WrapKeyResponse>;\n  }\n\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and\n   * symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: UnwrapKeyOptionalParams\n  ): Promise<UnwrapKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      unwrapKeyOperationSpec\n    ) as Promise<UnwrapKeyResponse>;\n  }\n\n  /**\n   * The release key operation is applicable to all key types. The target key must be marked exportable.\n   * This operation requires the keys/release permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param targetAttestationToken The attestation assertion for the target of the key release.\n   * @param options The options parameters.\n   */\n  release(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    targetAttestationToken: string,\n    options?: ReleaseOptionalParams\n  ): Promise<ReleaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      targetAttestationToken,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      releaseOperationSpec\n    ) as Promise<ReleaseResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys\n   * operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on\n   * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation\n   * requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?: GetDeletedKeysOptionalParams\n  ): Promise<GetDeletedKeysResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedKeysOperationSpec\n    ) as Promise<GetDeletedKeysResponse>;\n  }\n\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can\n   * be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This\n   * operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetDeletedKeyOptionalParams\n  ): Promise<GetDeletedKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedKeyOperationSpec\n    ) as Promise<GetDeletedKeyResponse>;\n  }\n\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/purge permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The options parameters.\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: PurgeDeletedKeyOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      purgeDeletedKeyOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It\n   * recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The options parameters.\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: RecoverDeletedKeyOptionalParams\n  ): Promise<RecoverDeletedKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      recoverDeletedKeyOperationSpec\n    ) as Promise<RecoverDeletedKeyResponse>;\n  }\n\n  /**\n   * The GetKeyRotationPolicy operation returns the specified key policy resources in the specified key\n   * vault. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in a given key vault.\n   * @param options The options parameters.\n   */\n  getKeyRotationPolicy(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetKeyRotationPolicyOptionalParams\n  ): Promise<GetKeyRotationPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyRotationPolicyOperationSpec\n    ) as Promise<GetKeyRotationPolicyResponse>;\n  }\n\n  /**\n   * Set specified members in the key policy. Leave others as undefined. This operation requires the\n   * keys/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in the given vault.\n   * @param keyRotationPolicy The policy for the key.\n   * @param options The options parameters.\n   */\n  updateKeyRotationPolicy(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyRotationPolicy: KeyRotationPolicy,\n    options?: UpdateKeyRotationPolicyOptionalParams\n  ): Promise<UpdateKeyRotationPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      keyRotationPolicy,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      updateKeyRotationPolicyOperationSpec\n    ) as Promise<UpdateKeyRotationPolicyResponse>;\n  }\n\n  /**\n   * Get the requested number of bytes containing random values from a managed HSM.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param count The requested number of random bytes.\n   * @param options The options parameters.\n   */\n  getRandomBytes(\n    vaultBaseUrl: string,\n    count: number,\n    options?: GetRandomBytesOptionalParams\n  ): Promise<GetRandomBytesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      count,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getRandomBytesOperationSpec\n    ) as Promise<GetRandomBytesResponse>;\n  }\n\n  /**\n   * GetKeyVersionsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param nextLink The nextLink from the previous successful call to the GetKeyVersions method.\n   * @param options The options parameters.\n   */\n  getKeyVersionsNext(\n    vaultBaseUrl: string,\n    keyName: string,\n    nextLink: string,\n    options?: GetKeyVersionsNextOptionalParams\n  ): Promise<GetKeyVersionsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      keyName,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeyVersionsNextOperationSpec\n    ) as Promise<GetKeyVersionsNextResponse>;\n  }\n\n  /**\n   * GetKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetKeys method.\n   * @param options The options parameters.\n   */\n  getKeysNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetKeysNextOptionalParams\n  ): Promise<GetKeysNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getKeysNextOperationSpec\n    ) as Promise<GetKeysNextResponse>;\n  }\n\n  /**\n   * GetDeletedKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetDeletedKeys method.\n   * @param options The options parameters.\n   */\n  getDeletedKeysNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetDeletedKeysNextOptionalParams\n  ): Promise<GetDeletedKeysNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedKeysNextOperationSpec\n    ) as Promise<GetDeletedKeysNextResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/create\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      kty: [\"kty\"],\n      keySize: [\"options\", \"keySize\"],\n      publicExponent: [\"options\", \"publicExponent\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyCreateParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst rotateKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/rotate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst importKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: [\"key\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyImportParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyUpdateParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyVersionsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/versions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst backupKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/backup\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst restoreKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/restore\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { keyBundleBackup: [\"keyBundleBackup\"] },\n    mapper: { ...Mappers.KeyRestoreParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encryptOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/encrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decryptOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/decrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst signOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/sign\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { algorithm: [\"algorithm\"], value: [\"value\"] },\n    mapper: { ...Mappers.KeySignParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst verifyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/verify\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      digest: [\"digest\"],\n      signature: [\"signature\"]\n    },\n    mapper: { ...Mappers.KeyVerifyParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst wrapKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/wrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst unwrapKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/unwrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst releaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/release\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyReleaseResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      targetAttestationToken: [\"targetAttestationToken\"],\n      nonce: [\"options\", \"nonce\"],\n      enc: [\"options\", \"enc\"]\n    },\n    mapper: { ...Mappers.KeyReleaseParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDeletedKeysOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedkeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedkeys/{key-name}/recover\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyRotationPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyRotationPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: Parameters.keyRotationPolicy,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getRandomBytesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/rng\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RandomBytes\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { count: [\"count\"] },\n    mapper: { ...Mappers.GetRandomBytesRequest, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyVersionsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeysNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}