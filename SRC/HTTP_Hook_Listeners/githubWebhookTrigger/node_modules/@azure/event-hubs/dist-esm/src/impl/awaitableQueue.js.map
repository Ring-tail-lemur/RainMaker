{"version":3,"file":"awaitableQueue.js","sourceRoot":"","sources":["../../../src/impl/awaitableQueue.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;;;GAOG;AACH,MAAM,OAAO,cAAc;IAKzB;QAFiB,eAAU,GAA8B,EAAE,CAAC;QAG1D,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,KAAK;QACV,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,IAAO;QACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxB;IACH,CAAC;IAEO,gBAAgB,CAAC,IAAO;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACzC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,KAAK,CAAC;SACd;QAED,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * `AwaitableQueue` stores items in the order that they are received.\n *\n * This differs from ordinary Queues in that `shift` returns a Promise for a value.\n * This allows a consumer of the queue to request an item that the queue does not yet have.\n *\n * @internal\n */\nexport class AwaitableQueue<T> {\n  private readonly _items: T[];\n\n  private readonly _resolvers: Array<(value: T) => void> = [];\n\n  constructor() {\n    this._items = [];\n  }\n\n  public size(): number {\n    return this._items.length;\n  }\n\n  /**\n   * Returns a Promise that will resolve with the next item in the queue.\n   */\n  public shift(): Promise<T> {\n    const item = this._items.shift();\n    if (typeof item !== \"undefined\") {\n      return Promise.resolve(item);\n    }\n\n    return new Promise<T>((resolve) => this._resolvers.push(resolve));\n  }\n\n  /**\n   * Appends new item to the queue.\n   */\n  public push(item: T): void {\n    if (!this._resolveNextItem(item)) {\n      this._items.push(item);\n    }\n  }\n\n  private _resolveNextItem(item: T) {\n    const resolver = this._resolvers.shift();\n    if (!resolver) {\n      return false;\n    }\n\n    resolver(item);\n    return true;\n  }\n}\n"]}