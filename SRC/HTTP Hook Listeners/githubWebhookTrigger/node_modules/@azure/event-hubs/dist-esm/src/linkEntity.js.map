{"version":3,"file":"linkEntity.js","sourceRoot":"","sources":["../../src/linkEntity.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AwaitableSender, Receiver } from \"rhea-promise\";\nimport { Constants, TokenType, defaultCancellableLock, isSasTokenProvider } from \"@azure/core-amqp\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { getRetryAttemptTimeoutInMs } from \"./util/retries\";\nimport { logger } from \"./log\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * @internal\n */\nexport interface LinkEntityOptions {\n  /**\n   * The unique name for the entity. If not provided then a guid will be\n   * assigned.\n   */\n  name?: string;\n  /**\n   * The partitionId associated with the link entity.\n   */\n  partitionId?: string;\n  /**\n   * The link entity address in one of the following forms:\n   */\n  address?: string;\n  /**\n   * The link entity token audience in one of the following forms:\n   */\n  audience?: string;\n}\n\n/**\n * Describes the base class for entities like EventHub Sender, Receiver and Management link.\n * @internal\n */\nexport class LinkEntity {\n  /**\n   * The unique name for the entity (mostly a guid).\n   */\n  name: string;\n  /**\n   * The link entity address in one of the following forms:\n   *\n   * **Sender**\n   * - `\"<hubName>\"`\n   * - `\"<hubName>/Partitions/<partitionId>\"`.\n   *\n   * **Receiver**\n   * - `\"<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   * **ManagementClient**\n   * -`\"$management\"`.\n   */\n  address: string;\n  /**\n   * The link entity token audience in one of the following forms:\n   *\n   * **Sender**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   * **Receiver**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   * **ManagementClient**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   */\n  audience: string;\n  /**\n   * The partitionId associated with the link entity.\n   */\n  partitionId?: string;\n  /**\n   * Indicates whether the link is in the process of connecting\n   * (establishing) itself. Default value: `false`.\n   */\n  isConnecting: boolean = false;\n  /**\n   * Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   */\n  protected _context: ConnectionContext;\n  /**\n   * The token renewal timer that keeps track of when\n   * the Link Entity is due for token renewal.\n   */\n  protected _tokenRenewalTimer?: NodeJS.Timer;\n  /**\n   * Indicates token timeout in milliseconds\n   */\n  protected _tokenTimeoutInMs?: number;\n  /**\n   * Creates a new LinkEntity instance.\n   * @param context - The connection context.\n   * @param options - Options that can be provided while creating the LinkEntity.\n   */\n  constructor(context: ConnectionContext, options?: LinkEntityOptions) {\n    if (!options) options = {};\n    this._context = context;\n    this.address = options.address || \"\";\n    this.audience = options.audience || \"\";\n    this.name = `${options.name}-${uuid()}`;\n    this.partitionId = options.partitionId;\n  }\n\n  /**\n   * Negotiates cbs claim for the LinkEntity.\n   * @returns Promise<void>\n   */\n  protected async _negotiateClaim({\n    abortSignal,\n    setTokenRenewal,\n    timeoutInMs,\n  }: {\n    setTokenRenewal: boolean | undefined;\n    abortSignal: AbortSignalLike | undefined;\n    timeoutInMs: number;\n  }): Promise<void> {\n    // Acquire the lock and establish a cbs session if it does not exist on the connection.\n    // Although node.js is single threaded, we need a locking mechanism to ensure that a\n    // race condition does not happen while creating a shared resource (in this case the\n    // cbs session, since we want to have exactly 1 cbs session per connection).\n    logger.verbose(\n      \"[%s] Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: \" +\n        \"'%s' with address: '%s'.\",\n      this._context.connectionId,\n      this._context.cbsSession.cbsLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    const startTime = Date.now();\n    if (!this._context.cbsSession.isOpen()) {\n      await defaultCancellableLock.acquire(\n        this._context.cbsSession.cbsLock,\n        () => {\n          return this._context.cbsSession.init({\n            abortSignal,\n            timeoutInMs: timeoutInMs - (Date.now() - startTime),\n          });\n        },\n        {\n          abortSignal,\n          timeoutInMs,\n        }\n      );\n    }\n    let tokenObject: AccessToken;\n    let tokenType: TokenType;\n    if (isSasTokenProvider(this._context.tokenCredential)) {\n      tokenObject = this._context.tokenCredential.getToken(this.audience);\n      tokenType = TokenType.CbsTokenTypeSas;\n\n      // renew sas token in every 45 minutess\n      this._tokenTimeoutInMs = (3600 - 900) * 1000;\n    } else {\n      const aadToken = await this._context.tokenCredential.getToken(Constants.aadEventHubsScope);\n      if (!aadToken) {\n        throw new Error(`Failed to get token from the provided \"TokenCredential\" object`);\n      }\n      tokenObject = aadToken;\n      tokenType = TokenType.CbsTokenTypeJwt;\n      this._tokenTimeoutInMs = tokenObject.expiresOnTimestamp - Date.now() - 2 * 60 * 1000;\n    }\n\n    logger.verbose(\n      \"[%s] %s: calling negotiateClaim for audience '%s'.\",\n      this._context.connectionId,\n      this._type,\n      this.audience\n    );\n    // Acquire the lock to negotiate the CBS claim.\n    logger.verbose(\n      \"[%s] Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.\",\n      this._context.connectionId,\n      this._context.negotiateClaimLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    await defaultCancellableLock.acquire(\n      this._context.negotiateClaimLock,\n      () => {\n        return this._context.cbsSession.negotiateClaim(\n          this.audience,\n          tokenObject.token,\n          tokenType,\n          { abortSignal, timeoutInMs: timeoutInMs - (Date.now() - startTime) }\n        );\n      },\n      {\n        abortSignal,\n        timeoutInMs: timeoutInMs - (Date.now() - startTime),\n      }\n    );\n    logger.verbose(\n      \"[%s] Negotiated claim for %s '%s' with with address: %s\",\n      this._context.connectionId,\n      this._type,\n      this.name,\n      this.address\n    );\n    if (setTokenRenewal) {\n      await this._ensureTokenRenewal();\n    }\n  }\n\n  /**\n   * Ensures that the token is renewed within the predefined renewal margin.\n   */\n  protected _ensureTokenRenewal(): void {\n    if (!this._tokenTimeoutInMs) {\n      return;\n    }\n    // Clear the existing token renewal timer.\n    // This scenario can happen if the connection goes down and is brought back up\n    // before the `nextRenewalTimeout` was reached.\n    if (this._tokenRenewalTimer) {\n      clearTimeout(this._tokenRenewalTimer);\n    }\n    this._tokenRenewalTimer = setTimeout(async () => {\n      try {\n        await this._negotiateClaim({\n          setTokenRenewal: true,\n          abortSignal: undefined,\n          timeoutInMs: getRetryAttemptTimeoutInMs(undefined),\n        });\n      } catch (err: any) {\n        logger.verbose(\n          \"[%s] %s '%s' with address %s, an error occurred while renewing the token: %O\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address,\n          err\n        );\n      }\n    }, this._tokenTimeoutInMs);\n    logger.verbose(\n      \"[%s] %s '%s' with address %s, has next token renewal in %d milliseconds @(%s).\",\n      this._context.connectionId,\n      this._type,\n      this.name,\n      this.address,\n      this._tokenTimeoutInMs,\n      new Date(Date.now() + this._tokenTimeoutInMs).toString()\n    );\n  }\n\n  /**\n   * Closes the Sender|Receiver link and it's underlying session and also removes it from the\n   * internal map.\n   * @param link - The Sender or Receiver link that needs to be closed and\n   * removed.\n   */\n  protected async _closeLink(link?: AwaitableSender | Receiver): Promise<void> {\n    clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n    if (link) {\n      try {\n        // Closing the link and its underlying session if the link is open. This should also\n        // remove them from the internal map.\n        await link.close();\n        logger.verbose(\n          \"[%s] %s '%s' with address '%s' closed.\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address\n        );\n      } catch (err: any) {\n        logger.verbose(\n          \"[%s] An error occurred while closing the %s '%s' with address '%s': %O\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address,\n          err\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides the current type of the LinkEntity.\n   * @returns The entity type.\n   */\n  private get _type(): string {\n    let result = \"LinkEntity\";\n    if ((this as any).constructor && (this as any).constructor.name) {\n      result = (this as any).constructor.name;\n    }\n    return result;\n  }\n}\n"]}