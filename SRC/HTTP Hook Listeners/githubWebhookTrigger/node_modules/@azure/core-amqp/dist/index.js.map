{"version":3,"file":"index.js","sources":["../src/util/typeGuards.ts","../src/util/constants.ts","../src/log.ts","../src/util/lock.ts","../src/util/utils.ts","../src/errors.ts","../src/requestResponseLink.ts","../src/util/checkNetworkConnection.ts","../src/retry.ts","../src/auth/token.ts","../src/connectionConfig/connectionConfig.ts","../src/cbs.ts","../src/messageHeader.ts","../src/messageProperties.ts","../src/util/runtimeInfo.ts","../src/ConnectionContextBase.ts","../src/amqpAnnotatedMessage.ts","../src/auth/tokenProvider.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasTokenProvider } from \"../auth/tokenProvider\";\n\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n * @internal\n */\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return typeof thing !== \"undefined\" && thing !== null;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * Note: The properties may be inherited.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n * @internal\n */\nexport function isObjectWithProperties<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  properties: PropertyName[]\n): thing is Thing & Record<PropertyName, unknown> {\n  if (!isDefined(thing) || typeof thing !== \"object\") {\n    return false;\n  }\n\n  for (const property of properties) {\n    if (!objectHasProperty(thing, property)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * Note: The property may be inherited.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n * @internal\n */\nexport function objectHasProperty<Thing extends unknown, PropertyName extends string>(\n  thing: Thing,\n  property: PropertyName\n): thing is Thing & Record<PropertyName, unknown> {\n  return typeof thing === \"object\" && property in (thing as Record<string, unknown>);\n}\n\n/**\n * Typeguard that checks if the input is a SasTokenProvider.\n * @param thing - Any object.\n * @hidden\n */\nexport function isSasTokenProvider(thing: unknown): thing is SasTokenProvider {\n  return isObjectWithProperties(thing, [\"isSasTokenProvider\"]) && thing.isSasTokenProvider === true;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const Constants = {\n  associatedLinkName: \"associated-link-name\",\n  partitionKey: \"x-opt-partition-key\",\n  sequenceNumber: \"x-opt-sequence-number\",\n  enqueueSequenceNumber: \"x-opt-enqueue-sequence-number\",\n  enqueuedTime: \"x-opt-enqueued-time\",\n  scheduledEnqueueTime: \"x-opt-scheduled-enqueue-time\",\n  offset: \"x-opt-offset\",\n  lockedUntil: \"x-opt-locked-until\",\n  partitionIdName: \"x-opt-partition-id\",\n  publisher: \"x-opt-publisher-name\",\n  viaPartitionKey: \"x-opt-via-partition-key\",\n  deadLetterSource: \"x-opt-deadletter-source\",\n  messageState: \"x-opt-message-state\",\n  enqueuedTimeAnnotation: `amqp.annotation.x-opt-enqueued-time`,\n  offsetAnnotation: `amqp.annotation.x-opt-offset`,\n  sequenceNumberAnnotation: `amqp.annotation.x-opt-sequence-number`,\n  guidSize: 16,\n  message: \"message\",\n  error: \"error\",\n  statusCode: \"status-code\",\n  statusDescription: \"status-description\",\n  errorCondition: \"error-condition\",\n  management: \"$management\",\n  partition: \"partition\",\n  partitionId: \"partitionId\",\n  readOperation: \"READ\",\n  TLS: \"tls\",\n  establishConnection: \"establishConnection\",\n  defaultConsumerGroup: \"$default\",\n  eventHub: \"eventhub\",\n  cbsEndpoint: \"$cbs\",\n  cbsReplyTo: \"cbs\",\n  operationPutToken: \"put-token\",\n  aadEventHubsAudience: \"https://eventhubs.azure.net/\",\n  aadEventHubsScope: \"https://eventhubs.azure.net//.default\",\n  aadServiceBusAudience: \"https://servicebus.azure.net/\",\n  aadServiceBusScope: \"https://servicebus.azure.net//.default\",\n  maxUserAgentLength: 512,\n  vendorString: \"com.microsoft\",\n  attachEpoch: `com.microsoft:epoch`,\n  receiverIdentifierName: `com.microsoft:receiver-name`,\n  enableReceiverRuntimeMetricName: `com.microsoft:enable-receiver-runtime-metric`,\n  timespan: `com.microsoft:timespan`,\n  uri: `com.microsoft:uri`,\n  dateTimeOffset: `com.microsoft:datetime-offset`,\n  sessionFilterName: `com.microsoft:session-filter`,\n  receiverError: \"receiver_error\",\n  senderError: \"sender_error\",\n  sessionError: \"session_error\",\n  connectionError: \"connection_error\",\n  defaultOperationTimeoutInMs: 60000,\n  defaultConnectionIdleTimeoutInMs: 60000,\n  managementRequestKey: \"managementRequest\",\n  negotiateCbsKey: \"negotiateCbs\",\n  negotiateClaim: \"negotiateClaim\",\n  ensureContainerAndBlob: \"ensureContainerAndBlob\",\n  defaultPrefetchCount: 1000,\n  reconnectLimit: 100,\n  maxMessageIdLength: 128,\n  maxPartitionKeyLength: 128,\n  maxSessionIdLength: 128,\n  pathDelimiter: \"/\",\n  ruleNameMaximumLength: 50,\n  maximumSqlFilterStatementLength: 1024,\n  maximumSqlRuleActionStatementLength: 1024,\n  maxDeadLetterReasonLength: 4096,\n  // https://stackoverflow.com/questions/11526504/minimum-and-maximum-date for js\n  // However we are setting this to the TimeSpan.MaxValue of C#.\n  maxDurationValue: 922337203685477,\n  minDurationValue: -922337203685477,\n  // https://github.com/Azure/azure-amqp/blob/master/Microsoft.Azure.Amqp/Amqp/AmqpConstants.cs#L47\n  maxAbsoluteExpiryTime: new Date(\"9999-12-31T07:59:59.000Z\").getTime(),\n  aadTokenValidityMarginInMs: 5000,\n  connectionReconnectDelay: 300,\n  defaultMaxRetries: 3,\n  defaultMaxRetriesForConnection: 150,\n  defaultDelayBetweenOperationRetriesInMs: 30000,\n  defaultMaxDelayForExponentialRetryInMs: 90000,\n  receiverSettleMode: \"receiver-settle-mode\",\n  dispositionStatus: \"disposition-status\",\n  fromSequenceNumber: \"from-sequence-number\",\n  messageCount: \"message-count\",\n  lockTokens: \"lock-tokens\",\n  messageIdMapKey: \"message-id\",\n  sequenceNumberMapKey: \"sequence-number\",\n  lockTokenMapKey: \"lock-token\",\n  sessionIdMapKey: \"session-id\",\n  sequenceNumbers: \"sequence-numbers\",\n  deadLetterReason: \"deadletter-reason\",\n  deadLetterDescription: \"deadletter-description\",\n  propertiesToModify: \"properties-to-modify\",\n  deadLetterName: \"com.microsoft:dead-letter\",\n  trackingId: \"com.microsoft:tracking-id\",\n  serverTimeout: \"com.microsoft:server-timeout\",\n  operations: {\n    putToken: \"put-token\",\n    read: \"READ\",\n    cancelScheduledMessage: \"com.microsoft:cancel-scheduled-message\",\n    scheduleMessage: \"com.microsoft:schedule-message\",\n    renewLock: \"com.microsoft:renew-lock\",\n    peekMessage: \"com.microsoft:peek-message\",\n    receiveBySequenceNumber: \"com.microsoft:receive-by-sequence-number\",\n    updateDisposition: \"com.microsoft:update-disposition\",\n    renewSessionLock: \"com.microsoft:renew-session-lock\",\n    setSessionState: \"com.microsoft:set-session-state\",\n    getSessionState: \"com.microsoft:get-session-state\",\n    enumerateSessions: \"com.microsoft:get-message-sessions\",\n    addRule: \"com.microsoft:add-rule\",\n    removeRule: \"com.microsoft:remove-rule\",\n    enumerateRules: \"com.microsoft:enumerate-rules\",\n  },\n  descriptorCodes: {\n    ruleDescriptionList: 1335734829060,\n    sqlFilterList: 83483426822,\n    correlationFilterList: 83483426825,\n    sqlRuleActionList: 1335734829062,\n    trueFilterList: 83483426823,\n    falseFilterList: 83483426824,\n  },\n} as const;\n\n/**\n * The standard error message accompanying an AbortError.\n * @hidden\n */\nexport const StandardAbortMessage = \"The operation was aborted.\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nimport { isObjectWithProperties } from \"./util/typeGuards\";\n\n/**\n * The \\@azure/logger configuration for this package.\n * This will output logs using the `azure:event-hubs` namespace prefix.\n */\nexport const logger = createClientLogger(\"core-amqp\");\n\n/**\n * Logs the error's stack trace to \"verbose\" if a stack trace is available.\n * @param error - Error containing a stack trace.\n * @internal\n */\nexport function logErrorStackTrace(error: unknown): void {\n  if (isObjectWithProperties(error, [\"stack\"])) {\n    logger.verbose(error.stack);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationTimeoutError } from \"rhea-promise\";\nimport { StandardAbortMessage } from \"./constants\";\nimport { logger } from \"../log\";\n\n/**\n * Describes the properties that must be provided while acquiring a lock.\n */\nexport interface AcquireLockProperties {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel lock acquisition.\n   * This only applies to the acquisition of a lock. Once the lock is acquired, the task is invoked and `acquire`\n   * can no longer be cancelled.\n   * This does not cancel running the task passed to `acquire()` if the lock has been acquired,\n   * but will prevent it from running if cancelled before the task is invoked.\n   */\n  abortSignal: AbortSignalLike | undefined;\n  /**\n   * The allowed amount of time in milliseconds to acquire a lock.\n   * If a lock isn't acquired within this time, the promise returned\n   * by `acquire()` will be rejected with an Error.\n   */\n  timeoutInMs: number | undefined;\n}\n\n/**\n * Describes the components related to a specific task.\n * @internal\n */\ninterface TaskDetails {\n  abortListener?: () => void;\n  abortSignal?: AbortSignalLike;\n  resolve: (value: unknown) => void;\n  reject: (reason: Error) => void;\n  task: (...args: any[]) => Promise<unknown>;\n  tid?: ReturnType<typeof setTimeout>;\n}\n\n/**\n * CancellableAsyncLock provides a mechanism for forcing tasks using the same\n * 'key' to be executed serially.\n *\n * Pending tasks can be manually cancelled via an abortSignal or automatically\n * cancelled by reach a provided timeout value.\n */\nexport interface CancellableAsyncLock {\n  /**\n   * Returns a promise that resolves to the value returned by the provided task function.\n   * Only 1 task can be invoked at a time for a given `key` value.\n   *\n   * An acquire call can be cancelled via an `abortSignal`.\n   * If cancelled, the promise will be rejected with an `AbortError`.\n   *\n   * `acquireTimeoutInMs` can also be provided to properties.\n   * If the timeout is reached before the provided `task` is invoked,\n   * then the promise will be rejected with an Error stating the task\n   * timed out waiting to acquire a lock.\n   *\n   * @param key - All `acquire` calls are grouped by the provided `key`.\n   * @param task - The function to invoke once the lock has been acquired.\n   * @param properties - Additional properties to control the behavior of `acquire`.\n   */\n  acquire<T = void>(\n    key: string,\n    task: (...args: any[]) => Promise<T>,\n    properties: AcquireLockProperties\n  ): Promise<T>;\n}\n\n/**\n * This class is used to coordinate executing tasks that should not be run in parallel.\n * @internal\n */\nexport class CancellableAsyncLockImpl {\n  private _keyMap = new Map<string, TaskDetails[]>();\n  private _executionRunningSet = new Set<string>();\n  /**\n   * Returns a promise that resolves to the value returned by the provided task function.\n   * Only 1 task can be invoked at a time for a given `key` value.\n   *\n   * An acquire call can be cancelled via an `abortSignal`.\n   * If cancelled, the promise will be rejected with an `AbortError`.\n   *\n   * `acquireTimeoutInMs` can also be provided to properties.\n   * If the timeout is reached before the provided `task` is invoked,\n   * then the promise will be rejected with an Error stating the task\n   * timed out waiting to acquire a lock.\n   *\n   * @param key - All `acquire` calls are grouped by the provided `key`.\n   * @param task - The function to invoke once the lock has been acquired.\n   * @param properties - Additional properties to control the behavior of `acquire`.\n   */\n  acquire<T = void>(\n    key: string,\n    task: (...args: any[]) => Promise<T>,\n    properties: AcquireLockProperties\n  ): Promise<T> {\n    const { abortSignal, timeoutInMs } = properties;\n    // Fast exit if the operation is already cancelled.\n    if (abortSignal?.aborted) {\n      return Promise.reject(new AbortError(StandardAbortMessage));\n    }\n\n    // Ensure we've got a task queue for the given key.\n    const taskQueue = this._keyMap.get(key) ?? [];\n    this._keyMap.set(key, taskQueue);\n\n    // This method will return a promise that will be fulfilled outside this function.\n    const { promise, rejecter, resolver } = getPromiseParts();\n\n    const taskDetails: TaskDetails = {\n      reject: rejecter,\n      resolve: resolver,\n      task,\n    };\n\n    // Handle timeouts by removing the task from the queue when hit.\n    if (typeof timeoutInMs === \"number\") {\n      const tid = setTimeout(() => {\n        this._removeTaskDetails(key, taskDetails);\n        rejecter(\n          new OperationTimeoutError(`The task timed out waiting to acquire a lock for ${key}`)\n        );\n      }, timeoutInMs);\n      taskDetails.tid = tid;\n    }\n\n    // Handle cancellation by removing the task from the queue when cancelled.\n    if (abortSignal) {\n      const abortListener = (): void => {\n        this._removeTaskDetails(key, taskDetails);\n        rejecter(new AbortError(StandardAbortMessage));\n      };\n      abortSignal.addEventListener(\"abort\", abortListener);\n      taskDetails.abortSignal = abortSignal;\n      taskDetails.abortListener = abortListener;\n    }\n\n    // Enqueue the task!\n    taskQueue.push(taskDetails);\n    logger.verbose(\n      `Called acquire() for lock \"${key}\". Lock \"${key}\" has ${taskQueue.length} pending tasks.`\n    );\n\n    // Start a loop to iterate over the task queue.\n    // This will run asynchronously and won't allow\n    // more than 1 concurrent execution per key at a time.\n    this._execute(key);\n\n    return promise as Promise<T>;\n  }\n\n  /**\n   * Iterates over all the pending tasks for a given `key` serially.\n   *\n   * Note: If the pending tasks are already being iterated by an early\n   * _execute invocation, this returns immediately.\n   * @returns\n   */\n  private async _execute(key: string): Promise<void> {\n    // If the key already exists in the set, then exit because\n    // tasks are already being processed.\n    if (this._executionRunningSet.has(key)) {\n      return;\n    }\n\n    const taskQueue = this._keyMap.get(key);\n    // If the queue is empty, exit early!\n    if (!taskQueue || !taskQueue.length) {\n      return;\n    }\n\n    // Add the key to the set so we can tell the\n    // task queue is already being processed.\n    this._executionRunningSet.add(key);\n    while (taskQueue.length) {\n      // Remove tasks from the front of the queue.\n      // Order matters!\n      const taskDetails = taskQueue.shift();\n      if (!taskDetails) {\n        continue;\n      }\n\n      try {\n        logger.verbose(`Acquired lock for \"${key}\", invoking task.`);\n        cleanupTaskDetails(taskDetails);\n        const value = await taskDetails.task();\n        taskDetails.resolve(value);\n      } catch (err) {\n        taskDetails.reject(err);\n      }\n      logger.verbose(\n        `Task completed for lock \"${key}\". Lock \"${key}\" has ${taskQueue.length} pending tasks.`\n      );\n    }\n\n    // Indicate that the task queue for the key is empty\n    // and we're done processing it.\n    this._executionRunningSet.delete(key);\n  }\n\n  private _removeTaskDetails(key: string, taskDetails: TaskDetails): void {\n    const taskQueue = this._keyMap.get(key);\n    if (!taskQueue || !taskQueue.length) {\n      // The task is already gone from the queue, so our work here is done!\n      return;\n    }\n\n    const index = taskQueue.indexOf(taskDetails);\n    if (index !== -1) {\n      const [details] = taskQueue.splice(index, 1);\n      // Cleanup the task rejection code paths.\n      cleanupTaskDetails(details);\n    }\n  }\n}\n\n/**\n * @internal\n * Returns a promise and the promise's resolve and reject methods.\n */\nfunction getPromiseParts(): {\n  promise: Promise<unknown>;\n  resolver: (value: unknown) => void;\n  rejecter: (reason: Error) => void;\n} {\n  let resolver: (value: unknown) => void;\n  let rejecter: (reason: Error) => void;\n\n  const promise = new Promise<unknown>((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  });\n\n  return {\n    promise,\n    resolver: resolver!,\n    rejecter: rejecter!,\n  };\n}\n\n/**\n * @internal\n * Removes any abort listener or pending timeout from a task.\n */\nfunction cleanupTaskDetails(taskDetails: TaskDetails): void {\n  // Cleanup the task rejection code paths.\n  if (taskDetails.tid) clearTimeout(taskDetails.tid);\n  if (taskDetails.abortSignal && taskDetails.abortListener) {\n    taskDetails.abortSignal.removeEventListener(\"abort\", taskDetails.abortListener);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { CancellableAsyncLock, CancellableAsyncLockImpl } from \"./lock\";\nimport { StandardAbortMessage } from \"./constants\";\nimport { WebSocketImpl } from \"rhea-promise\";\nimport { isDefined } from \"./typeGuards\";\n\n/**\n * @internal\n *\n * Describes the options that can be provided to create an async lock.\n */\nexport interface AsyncLockOptions {\n  /**\n   * The max timeout. Default is: 0 (never timeout).\n   */\n  timeout?: number;\n  /**\n   * Maximum pending tasks. Default is: 1000.\n   */\n  maxPending?: number;\n  /**\n   * Whether lock can reenter in the same domain.\n   * Default is: false.\n   */\n  domainReentrant?: boolean;\n  /**\n   * Your implementation of the promise. Default is: global promise.\n   */\n  Promise?: any;\n}\n\n/**\n * Options to configure the channelling of the AMQP connection over Web Sockets.\n */\nexport interface WebSocketOptions {\n  /**\n   * The WebSocket constructor used to create an AMQP connection over a WebSocket.\n   * This option should be provided in the below scenarios:\n   * - The TCP port 5671 which is that is used by the AMQP connection to Event Hubs is blocked in your environment.\n   * - Your application needs to be run behind a proxy server.\n   * - Your application needs to run in the browser and you want to provide your own choice of Websocket implementation\n   *   instead of the built-in WebSocket in the browser.\n   */\n  webSocket?: WebSocketImpl;\n  /**\n   * Options to be passed to the WebSocket constructor when the underlying `rhea` library instantiates\n   * the WebSocket.\n   */\n  webSocketConstructorOptions?: any;\n}\n\n/**\n * @internal\n *\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" && Boolean(process.version) && Boolean(process.versions?.node);\n\n/**\n * Defines an object with possible properties defined in T.\n */\nexport type ParsedOutput<T> = { [P in keyof T]: T[P] };\n\n/**\n * Parses the connection string and returns an object of type T.\n *\n * Connection strings have the following syntax:\n *\n * ConnectionString ::= `Part { \";\" Part } [ \";\" ] [ WhiteSpace ]`\n * Part             ::= [ PartLiteral [ \"=\" PartLiteral ] ]\n * PartLiteral      ::= [ WhiteSpace ] Literal [ WhiteSpace ]\n * Literal          ::= ? any sequence of characters except ; or = or WhiteSpace ?\n * WhiteSpace       ::= ? all whitespace characters including `\\r` and `\\n` ?\n *\n * @param connectionString - The connection string to be parsed.\n * @returns ParsedOutput<T>.\n */\nexport function parseConnectionString<T>(connectionString: string): ParsedOutput<T> {\n  const output: { [k: string]: string } = {};\n  const parts = connectionString.trim().split(\";\");\n\n  for (let part of parts) {\n    part = part.trim();\n\n    if (part === \"\") {\n      // parts can be empty\n      continue;\n    }\n\n    const splitIndex = part.indexOf(\"=\");\n    if (splitIndex === -1) {\n      throw new Error(\n        \"Connection string malformed: each part of the connection string must have an `=` assignment.\"\n      );\n    }\n\n    const key = part.substring(0, splitIndex).trim();\n    if (key === \"\") {\n      throw new Error(\"Connection string malformed: missing key for assignment\");\n    }\n\n    const value = part.substring(splitIndex + 1).trim();\n\n    output[key] = value;\n  }\n\n  return output as any;\n}\n\n/**\n * The cancellable async lock instance.\n */\nexport const defaultCancellableLock: CancellableAsyncLock = new CancellableAsyncLockImpl();\n\n/**\n * @internal\n *\n * Describes a Timeout class that can wait for the specified amount of time and then resolve/reject\n * the promise with the given value.\n */\nexport class Timeout {\n  // Node and browsers return different types from setTimeout\n  // Any is the easiest way to avoid type errors in either platform\n  private _timer?: any;\n\n  set<T>(t: number, value?: T): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.clear();\n      const callback = value ? () => reject(new Error(`${value}`)) : resolve;\n      this._timer = setTimeout(callback, t);\n    });\n  }\n\n  clear(): void {\n    if (this._timer) {\n      clearTimeout(this._timer);\n    }\n  }\n\n  wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T> {\n    const wrappedPromise = this._promiseFinally(promise, () => this.clear());\n    const timer = this.set(t, value);\n    return Promise.race([wrappedPromise, timer]);\n  }\n\n  private _promiseFinally<T>(promise: Promise<T>, fn: (...args: any[]) => void): Promise<T> {\n    const success = (result: T): T => {\n      fn();\n      return result;\n    };\n    const error = (e: Error): Promise<never> => {\n      fn();\n      return Promise.reject(e);\n    };\n    return Promise.resolve(promise).then(success, error);\n  }\n\n  static set<T>(t: number, value?: T): Promise<T> {\n    return new Timeout().set(t, value);\n  }\n\n  static wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T> {\n    return new Timeout().wrap(promise, t, value);\n  }\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param abortSignal - The abortSignal associated with containing operation.\n * @param abortErrorMsg - The abort error message associated with containing operation.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns - Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  abortSignal?: AbortSignalLike,\n  abortErrorMsg?: string,\n  value?: T\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(new AbortError(abortErrorMsg ? abortErrorMsg : StandardAbortMessage));\n    };\n\n    const removeListeners = (): void => {\n      if (abortSignal && onAborted) {\n        abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (isDefined(timer)) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (abortSignal && abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (abortSignal) {\n      abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n\n/**\n * @internal\n *\n * Generates a random number between the given interval\n * @param min - Min number of the range (inclusive).\n * @param max - Max number of the range (inclusive).\n */\nexport function randomNumberFromInterval(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * @internal\n *\n * Type declaration for a Function type where T is the input to the function and V is the output\n * of the function.\n */\nexport type Func<T, V> = (a: T) => V;\n\n/**\n * @internal\n *\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n *\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @returns A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(\n  promiseFactories: Array<any>,\n  kickstart?: unknown\n): Promise<any> {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * @internal\n *\n * Determines whether the given connection string is an iothub connection string.\n * @param connectionString - The connection string.\n * @returns boolean.\n */\nexport function isIotHubConnectionString(connectionString: string): boolean {\n  connectionString = String(connectionString);\n\n  let result: boolean = false;\n  const model: any = parseConnectionString<any>(connectionString);\n  if (model && model.HostName && model.SharedAccessKey && model.SharedAccessKeyName) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nexport function isString(s: unknown): s is string {\n  return typeof s === \"string\";\n}\n\n/**\n * @internal\n */\nexport function isNumber(n: unknown): n is number {\n  return typeof n === \"number\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport { AmqpError, AmqpResponseStatusCode, isAmqpError as rheaIsAmqpError } from \"rhea-promise\";\nimport { isDefined, isObjectWithProperties } from \"./util/typeGuards\";\nimport { isNode, isNumber, isString } from \"../src/util/utils\";\n\n/**\n * Maps the conditions to the numeric AMQP Response status codes.\n * @internal\n */\nexport enum ConditionStatusMapper {\n  \"com.microsoft:timeout\" = AmqpResponseStatusCode.RequestTimeout,\n  \"amqp:not-found\" = AmqpResponseStatusCode.NotFound,\n  \"amqp:not-implemented\" = AmqpResponseStatusCode.NotImplemented,\n  \"com.microsoft:entity-already-exists\" = AmqpResponseStatusCode.Conflict,\n  \"com.microsoft:message-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:session-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:no-matching-subscription\" = AmqpResponseStatusCode.InternalServerError,\n  \"amqp:link:message-size-exceeded\" = AmqpResponseStatusCode.Forbidden,\n  \"com.microsoft:server-busy\" = AmqpResponseStatusCode.ServiceUnavailable,\n  \"com.microsoft:argument-error\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:argument-out-of-range\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:store-lock-lost\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:session-cannot-be-locked\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:partition-not-owned\" = AmqpResponseStatusCode.Gone,\n  \"com.microsoft:entity-disabled\" = AmqpResponseStatusCode.BadRequest,\n  \"com.microsoft:publisher-revoked\" = AmqpResponseStatusCode.Unauthorized,\n  \"amqp:link:stolen\" = AmqpResponseStatusCode.Gone,\n  \"amqp:not-allowed\" = AmqpResponseStatusCode.BadRequest,\n  \"amqp:unauthorized-access\" = AmqpResponseStatusCode.Unauthorized,\n  \"amqp:resource-limit-exceeded\" = AmqpResponseStatusCode.Forbidden,\n}\n\n/**\n * Maps the amqp error conditions to the Error names.\n */\nexport enum ConditionErrorNameMapper {\n  /**\n   * Error is thrown when the address is already in use.\n   */\n  \"com.microsoft:address-already-in-use\" = \"AddressAlreadyInUseError\",\n  /**\n   * Error is thrown when the store lock is lost.\n   */\n  \"com.microsoft:store-lock-lost\" = \"StoreLockLostError\",\n  /**\n   * Error is thrown when a matching subscription is not found.\n   */\n  \"com.microsoft:no-matching-subscription\" = \"NoMatchingSubscriptionError\",\n  /**\n   * Error is thrown when an attempt is made to access a partition that is not owned by the\n   * requesting entity.\n   */\n  \"com.microsoft:partition-not-owned\" = \"PartitionNotOwnedError\",\n  /**\n   * Error is thrown when access to publisher has been revoked.\n   */\n  \"com.microsoft:publisher-revoked\" = \"PublisherRevokedError\",\n  /**\n   * Error is thrown when an attempt is made to create an entity that already exists.\n   */\n  \"com.microsoft:entity-already-exists\" = \"MessagingEntityAlreadyExistsError\",\n  /**\n   * Error is thrown when trying to access/connect to a disabled messaging entity.\n   */\n  \"com.microsoft:entity-disabled\" = \"MessagingEntityDisabledError\",\n  /**\n   * Error is thrown when the lock on the message is lost.\n   */\n  \"com.microsoft:message-lock-lost\" = \"MessageLockLostError\",\n  /**\n   * Error is thrown when the lock on the Azure ServiceBus session is lost.\n   */\n  \"com.microsoft:session-lock-lost\" = \"SessionLockLostError\",\n  /**\n   * Error is thrown when the Azure ServiceBus session cannot be locked.\n   */\n  \"com.microsoft:session-cannot-be-locked\" = \"SessionCannotBeLockedError\",\n  /**\n   * Error is thrown when an internal server error occurred. You may have found a bug?\n   */\n  \"amqp:internal-error\" = \"InternalServerError\", // Retryable\n  /**\n   * Error for signaling general communication errors related to messaging operations.\n   */\n  \"amqp:not-found\" = \"ServiceCommunicationError\",\n  /**\n   * Error is thrown when the message is not found.\n   */\n  \"com.microsoft:message-not-found\" = \"MessageNotFoundError\",\n  /**\n   * Error is thrown when relay is not found.\n   */\n  \"com.microsoft:relay-not-found\" = \"RelayNotFoundError\",\n  /**\n   * Error is thrown when a feature is not implemented yet but the placeholder is present.\n   */\n  \"amqp:not-implemented\" = \"NotImplementedError\",\n  /**\n   * Error is thrown when an operation is attempted but is not allowed.\n   */\n  \"amqp:not-allowed\" = \"InvalidOperationError\",\n  /**\n   * Error is thrown the the Azure EventHub/ServiceBus quota has been exceeded.\n   * Quotas are reset periodically, this operation will have to wait until then.\n   * The messaging entity has reached its maximum allowable size.\n   * This can happen if the maximum number of receivers (which is 5) has already\n   * been opened on a per-consumer group level.\n   */\n  \"amqp:resource-limit-exceeded\" = \"QuotaExceededError\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  \"amqp:unauthorized-access\" = \"UnauthorizedError\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  \"com.microsoft:auth-failed\" = \"UnauthorizedError\",\n  /**\n   * Error is thrown when the service is unavailable. The operation should be retried.\n   */\n  \"com.microsoft:timeout\" = \"ServiceUnavailableError\", // Retryable\n  /**\n   * Error is thrown when no new messages are received for the specified time.\n   */\n  \"com.microsoft:message-wait-timeout\" = \"MessageWaitTimeout\",\n  /**\n   * Error is thrown when an argument has a value that is out of the admissible range.\n   */\n  \"com.microsoft:argument-out-of-range\" = \"ArgumentOutOfRangeError\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  \"amqp:precondition-failed\" = \"PreconditionFailedError\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  \"com.microsoft:precondition-failed\" = \"PreconditionFailedError\",\n  /**\n   * Error is thrown when data could not be decoded.\n   */\n  \"amqp:decode-error\" = \"DecodeError\",\n  /**\n   * Error is thrown when an invalid field was passed in a frame body, and the operation could not proceed.\n   */\n  \"amqp:invalid-field\" = \"InvalidFieldError\",\n  /**\n   * Error is thrown when the client attempted to work with a server entity to which it\n   * has no access because another client is working with it.\n   */\n  \"amqp:resource-locked\" = \"ResourceLockedError\",\n  /**\n   * Error is thrown when a server entity the client is working with has been deleted.\n   */\n  \"amqp:resource-deleted\" = \"ResourceDeletedError\",\n  /**\n   * Error is thrown when the peer sent a frame that is not permitted in the current state.\n   */\n  \"amqp:illegal-state\" = \"IllegalStateError\",\n  /**\n   * Error is thrown when the peer cannot send a frame because the smallest encoding of\n   * the performative with the currently valid values would be too large to fit within\n   * a frame of the agreed maximum frame size.\n   */\n  \"amqp:frame-size-too-small\" = \"FrameSizeTooSmallError\",\n  /**\n   * Error is thrown when an operator intervened to detach for some reason.\n   */\n  \"amqp:link:detach-forced\" = \"DetachForcedError\", // Retryable\n  /**\n   * Error is thrown when the peer sent more message transfers than currently allowed on the link.\n   */\n  \"amqp:link:transfer-limit-exceeded\" = \"TransferLimitExceededError\", // Retryable\n  /**\n   * Error is thrown when the message sent is too large: the maximum size is 256Kb.\n   */\n  \"amqp:link:message-size-exceeded\" = \"MessageTooLargeError\",\n  /**\n   * Error is thrown when the address provided cannot be resolved to a terminus at the current container.\n   */\n  \"amqp:link:redirect\" = \"LinkRedirectError\",\n  /**\n   * Error is thrown when two or more instances connect to the same partition\n   * with different epoch values.\n   */\n  \"amqp:link:stolen\" = \"ReceiverDisconnectedError\",\n  /**\n   * Error is thrown when the peer violated incoming window for the session.\n   */\n  \"amqp:session:window-violation\" = \"SessionWindowViolationError\",\n  /**\n   * Error is thrown when input was received for a link that was detached with an error.\n   */\n  \"amqp:session:errant-link\" = \"ErrantLinkError\",\n  /**\n   * Error is thrown when an attach was received using a handle that is already in use for an attached link.\n   */\n  \"amqp:session:handle-in-use\" = \"HandleInUseError\",\n  /**\n   * Error is thrown when a frame (other than attach) was received referencing a handle which is not\n   * currently in use of an attached link.\n   */\n  \"amqp:session:unattached-handle\" = \"UnattachedHandleError\",\n  /**\n   * Error is thrown when an operator intervened to close the connection for some reason.\n   */\n  \"amqp:connection:forced\" = \"ConnectionForcedError\", // Retryable\n  /**\n   * Error is thrown when a valid frame header cannot be formed from the incoming byte stream.\n   */\n  \"amqp:connection:framing-error\" = \"FramingError\",\n  /**\n   * Error is thrown when the container is no longer available on the current connection.\n   */\n  \"amqp:connection:redirect\" = \"ConnectionRedirectError\",\n  /**\n   * Error is thrown when the server is busy. Callers should wait a while and retry the operation.\n   */\n  \"com.microsoft:server-busy\" = \"ServerBusyError\", // Retryable\n  /**\n   * Error is thrown when an incorrect argument was received.\n   */\n  \"com.microsoft:argument-error\" = \"ArgumentError\",\n  /**\n   * Error is thrown when server cancels the operation due to an internal issue.\n   */\n  \"com.microsoft:operation-cancelled\" = \"OperationCancelledError\", // Retryable\n  /**\n   * Error is thrown when the client sender does not have enough link credits to send the message.\n   */\n  \"client.sender:not-enough-link-credit\" = \"SenderBusyError\", // Retryable\n  /**\n   * Error is thrown when a low level system error is thrown by node.js.\n   * {@link https://nodejs.org/dist/latest-v8.x/docs/api/all.html#errors_class_system_error}\n   */\n  \"system:error\" = \"SystemError\",\n}\n\n/**\n * Maps the Error names to the amqp error conditions.\n */\nexport enum ErrorNameConditionMapper {\n  /**\n   * Error is thrown when the address is already in use.\n   */\n  AddressAlreadyInUseError = \"com.microsoft:address-already-in-use\",\n  /**\n   * Error is thrown when the store lock is lost.\n   */\n  StoreLockLostError = \"com.microsoft:store-lock-lost\",\n  /**\n   * Error is thrown when a matching subscription is not found.\n   */\n  NoMatchingSubscriptionError = \"com.microsoft:no-matching-subscription\",\n  /**\n   * Error is thrown when an attempt is made to access a partition that is not owned by the\n   * requesting entity.\n   */\n  PartitionNotOwnedError = \"com.microsoft:partition-not-owned\",\n  /**\n   * Error is thrown when access to publisher has been revoked.\n   */\n  PublisherRevokedError = \"com.microsoft:publisher-revoked\",\n  /**\n   * Error is thrown when an attempt is made to create an entity that already exists.\n   */\n  MessagingEntityAlreadyExistsError = \"com.microsoft:entity-already-exists\",\n  /**\n   * Error is thrown when trying to access/connect to a disabled messaging entity.\n   */\n  MessagingEntityDisabledError = \"com.microsoft:entity-disabled\",\n  /**\n   * Error is thrown when the lock on the message is lost.\n   */\n  MessageLockLostError = \"com.microsoft:message-lock-lost\",\n  /**\n   * Error is thrown when the lock on the Azure ServiceBus session is lost.\n   */\n  SessionLockLostError = \"com.microsoft:session-lock-lost\",\n  /**\n   * Error is thrown when the Azure ServiceBus session cannot be locked.\n   */\n  SessionCannotBeLockedError = \"com.microsoft:session-cannot-be-locked\",\n  /**\n   * Error is thrown when an internal server error occurred. You may have found a bug?\n   */\n  InternalServerError = \"amqp:internal-error\", // Retryable\n  /**\n   * Error for signaling general communication errors related to messaging operations.\n   */\n  ServiceCommunicationError = \"amqp:not-found\",\n  /**\n   * Error is thrown when message is not found.\n   */\n  MessageNotFoundError = \"com.microsoft:message-not-found\",\n  /**\n   * Error is thrown when relay is not found.\n   */\n  RelayNotFoundError = \"com.microsoft:relay-not-found\",\n  /**\n   * Error is thrown when a feature is not implemented yet but the placeholder is present.\n   */\n  NotImplementedError = \"amqp:not-implemented\",\n  /**\n   * Error is thrown when an operation is attempted but is not allowed.\n   */\n  InvalidOperationError = \"amqp:not-allowed\",\n  /**\n   * Error is thrown the the Azure EventHub/ServiceBus quota has been exceeded.\n   * Quotas are reset periodically, this operation will have to wait until then.\n   * The messaging entity has reached its maximum allowable size.\n   * This can happen if the maximum number of receivers (which is 5) has already\n   * been opened on a per-consumer group level.\n   */\n  QuotaExceededError = \"amqp:resource-limit-exceeded\",\n  /**\n   * Error is thrown when the connection parameters are wrong and the server refused the connection.\n   */\n  UnauthorizedError = \"amqp:unauthorized-access\",\n  /**\n   * Error is thrown when the service is unavailable. The operation should be retried.\n   */\n  ServiceUnavailableError = \"com.microsoft:timeout\", // Retryable\n  /**\n   * Error is thrown when no new messages are received for the specified time.\n   */\n  MessageWaitTimeout = \"com.microsoft:message-wait-timeout\",\n  /**\n   * Error is thrown when an argument has a value that is out of the admissible range.\n   */\n  ArgumentOutOfRangeError = \"com.microsoft:argument-out-of-range\",\n  /**\n   * Error is thrown when a condition that should have been met in order to execute an operation was not.\n   */\n  PreconditionFailedError = \"amqp:precondition-failed\",\n  /**\n   * Error is thrown when data could not be decoded.\n   */\n  DecodeError = \"amqp:decode-error\",\n  /**\n   * Error is thrown when an invalid field was passed in a frame body, and the operation could not proceed.\n   */\n  InvalidFieldError = \"amqp:invalid-field\",\n  /**\n   * Error is thrown when the client attempted to work with a server entity to which it\n   * has no access because another client is working with it.\n   */\n  ResourceLockedError = \"amqp:resource-locked\",\n  /**\n   * Error is thrown when a server entity the client is working with has been deleted.\n   */\n  ResourceDeletedError = \"amqp:resource-deleted\",\n  /**\n   * Error is thrown when the peer sent a frame that is not permitted in the current state.\n   */\n  IllegalStateError = \"amqp:illegal-state\",\n  /**\n   * Error is thrown when the peer cannot send a frame because the smallest encoding of\n   * the performative with the currently valid values would be too large to fit within\n   * a frame of the agreed maximum frame size.\n   */\n  FrameSizeTooSmallError = \"amqp:frame-size-too-small\",\n  /**\n   * Error is thrown when an operator intervened to detach for some reason.\n   */\n  DetachForcedError = \"amqp:link:detach-forced\", // Retryable\n  /**\n   * Error is thrown when the peer sent more message transfers than currently allowed on the link.\n   */\n  TransferLimitExceededError = \"amqp:link:transfer-limit-exceeded\", // Retryable\n  /**\n   * Error is thrown when the message sent is too large: the maximum size is 256Kb.\n   */\n  MessageTooLargeError = \"amqp:link:message-size-exceeded\",\n  /**\n   * Error is thrown when the address provided cannot be resolved to a terminus at the current container.\n   */\n  LinkRedirectError = \"amqp:link:redirect\",\n  /**\n   * Error is thrown when two or more instances connect to the same partition\n   * with different epoch values.\n   */\n  ReceiverDisconnectedError = \"amqp:link:stolen\",\n  /**\n   * Error is thrown when the peer violated incoming window for the session.\n   */\n  SessionWindowViolationError = \"amqp:session:window-violation\",\n  /**\n   * Error is thrown when input was received for a link that was detached with an error.\n   */\n  ErrantLinkError = \"amqp:session:errant-link\",\n  /**\n   * Error is thrown when an attach was received using a handle that is already in use for an attached link.\n   */\n  HandleInUseError = \"amqp:session:handle-in-use\",\n  /**\n   * Error is thrown when a frame (other than attach) was received referencing a handle which is not\n   * currently in use of an attached link.\n   */\n  UnattachedHandleError = \"amqp:session:unattached-handle\",\n  /**\n   * Error is thrown when an operator intervened to close the connection for some reason.\n   */\n  ConnectionForcedError = \"amqp:connection:forced\", // Retryable\n  /**\n   * Error is thrown when a valid frame header cannot be formed from the incoming byte stream.\n   */\n  FramingError = \"amqp:connection:framing-error\",\n  /**\n   * Error is thrown when the container is no longer available on the current connection.\n   */\n  ConnectionRedirectError = \"amqp:connection:redirect\",\n  /**\n   * Error is thrown when the server is busy. Callers should wait a while and retry the operation.\n   */\n  ServerBusyError = \"com.microsoft:server-busy\", // Retryable\n  /**\n   * Error is thrown when an incorrect argument was received.\n   */\n  ArgumentError = \"com.microsoft:argument-error\",\n  /**\n   * Error is thrown when server cancels the operation due to an internal issue.\n   */\n  OperationCancelledError = \"com.microsoft:operation-cancelled\", // Retryable\n  /**\n   * Error is thrown when the client sender does not have enough link credits to send the message.\n   */\n  SenderBusyError = \"client.sender:not-enough-link-credit\", // Retryable\n  /**\n   * Error is thrown when a low level system error is thrown by node.js.\n   * {@link https://nodejs.org/api/errors.html#errors_class_systemerror}\n   */\n  SystemError = \"system:error\",\n}\n\n/**\n * Describes the fields on a Node.js SystemError.\n * Omits fields that are not related to network calls (e.g. file system calls).\n * See https://nodejs.org/dist/latest-v12.x/docs/api/errors.html#errors_class_systemerror\n */\nexport interface NetworkSystemError {\n  address?: string;\n  code: string;\n  errno: string | number;\n  info?: any;\n  message: string;\n  name: string;\n  port?: number;\n  stack: string;\n  syscall: string;\n}\n\n/**\n * @internal\n */\nconst systemErrorFieldsToCopy: (keyof Omit<NetworkSystemError, \"name\" | \"message\">)[] = [\n  \"address\",\n  \"code\",\n  \"errno\",\n  \"info\",\n  \"port\",\n  \"stack\",\n  \"syscall\",\n];\n\n/**\n * Determines if an error is a MessagingError.\n *\n * @param error - An error that can either be an Error or a MessagingError.\n */\nexport function isMessagingError(error: Error | MessagingError): error is MessagingError {\n  return error.name === \"MessagingError\";\n}\n\n/**\n * Describes the base class for Messaging Error.\n */\nexport class MessagingError extends Error {\n  /**\n   * Address to which the network connection failed.\n   * Only present if the `MessagingError` was instantiated with a Node.js `SystemError`.\n   */\n  address?: string;\n  /**\n   * A string label that identifies the error.\n   */\n  code?: string;\n  /**\n   * System-provided error number.\n   * Only present if the `MessagingError` was instantiated with a Node.js `SystemError`.\n   */\n  errno?: number | string;\n  /**\n   * The error name. Default value: \"MessagingError\".\n   */\n  name: string = \"MessagingError\";\n  /**\n   * The unavailable network connection port.\n   * Only present if the `MessagingError` was instantiated with a Node.js `SystemError`.\n   */\n  port?: number;\n  /**\n   * Name of the system call that triggered the error.\n   * Only present if the `MessagingError` was instantiated with a Node.js `SystemError`.\n   */\n  syscall?: string;\n  /**\n   *\n   * Describes whether the error is retryable. Default: true.\n   */\n  retryable: boolean = true;\n  /**\n   * Extra details about the error.\n   */\n  info?: any;\n  /**\n   * @param message - The error message that provides more information about the error.\n   * @param originalError - An error whose properties will be copied to the MessagingError if the\n   * property matches one found on the Node.js `SystemError`.\n   */\n  constructor(message: string, originalError?: Error) {\n    super(message);\n\n    if (!originalError) {\n      return;\n    }\n\n    // copy properties from system error\n    for (const propName of systemErrorFieldsToCopy) {\n      if ((originalError as NetworkSystemError)[propName] != undefined) {\n        this[propName] = (originalError as NetworkSystemError)[propName];\n      }\n    }\n  }\n}\n\n/**\n * Provides a list of retryable AMQP errors.\n * \"InternalServerError\", \"ServerBusyError\", \"ServiceUnavailableError\", \"OperationCancelledError\",\n * \"SenderBusyError\", \"MessagingError\", \"DetachForcedError\", \"ConnectionForcedError\",\n * \"TransferLimitExceededError\"\n */\nexport const retryableErrors: string[] = [\n  \"InternalServerError\",\n  \"ServerBusyError\",\n  \"ServiceUnavailableError\",\n  \"OperationCancelledError\",\n\n  // The service may throw UnauthorizedError if credentials have been rotated.\n  // Attempt to retry in case the user has also rotated their credentials.\n  \"UnauthorizedError\",\n\n  // OperationTimeoutError occurs when the service fails to respond within a given timeframe.\n  // Since reasons for such failures can be transient, this is treated as a retryable error.\n  \"OperationTimeoutError\",\n\n  \"SenderBusyError\",\n  \"MessagingError\",\n  \"DetachForcedError\",\n  \"ConnectionForcedError\",\n  \"TransferLimitExceededError\",\n\n  // InsufficientCreditError occurs when the number of credits available on Rhea link is insufficient.\n  // Since reasons for such shortage can be transient such as for pending delivery of messages, this is treated as a retryable error.\n  \"InsufficientCreditError\",\n];\n\n/**\n * Maps some SystemErrors to amqp error conditions\n */\nexport enum SystemErrorConditionMapper {\n  ENOTFOUND = \"amqp:not-found\",\n  EBUSY = \"com.microsoft:server-busy\",\n  ECONNREFUSED = \"amqp:connection:forced\",\n  ETIMEDOUT = \"com.microsoft:timeout\",\n  ECONNRESET = \"com.microsoft:timeout\",\n  ENETDOWN = \"com.microsoft:timeout\",\n  EHOSTDOWN = \"com.microsoft:timeout\",\n  ENETRESET = \"com.microsoft:timeout\",\n  ENETUNREACH = \"com.microsoft:timeout\",\n  ENONET = \"com.microsoft:timeout\",\n}\n\n/**\n * Checks whether the provided error is a node.js SystemError.\n * @param err - An object that may contain error information.\n */\nexport function isSystemError(err: unknown): err is NetworkSystemError {\n  if (!isObjectWithProperties(err, [\"code\", \"syscall\", \"errno\"])) {\n    return false;\n  }\n\n  if (!isString(err.code) || !isString(err.syscall)) {\n    return false;\n  }\n\n  if (!isString(err.errno) && !isNumber(err.errno)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * @internal\n * Since browser doesn't differentiate between the various kinds of service communication errors,\n * this utility is used to look at the error target to identify such category of errors.\n * For more information refer to - https://html.spec.whatwg.org/multipage/comms.html#feedback-from-the-protocol\n * @param err - object that may contain error information\n */\nfunction isBrowserWebsocketError(err: any): boolean {\n  let result: boolean = false;\n  if (!isNode && self && err.type === \"error\" && err.target instanceof (self as any).WebSocket) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nconst rheaPromiseErrors = [\n  // OperationTimeoutError occurs when the service fails to respond within a given timeframe.\n  \"OperationTimeoutError\",\n\n  // InsufficientCreditError occurs when the number of credits available on Rhea link is insufficient.\n  \"InsufficientCreditError\",\n\n  // Defines the error that occurs when the Sender fails to send a message.\n  \"SendOperationFailedError\",\n];\n\n/**\n * Translates the AMQP error received at the protocol layer or a SystemError into a MessagingError.\n * All other errors are returned unaltered.\n *\n * @param err - The amqp error that was received.\n * @returns MessagingError object.\n */\nexport function translate(err: AmqpError | Error): MessagingError | Error {\n  if (!isDefined(err)) {\n    return new Error(`Unknown error encountered.`);\n  } else if (typeof err !== \"object\") {\n    // The error is a scalar type, make it the message of an actual error.\n    return new Error(err);\n  }\n  // Built-in errors like TypeError and RangeError should not be retryable as these indicate issues\n  // with user input and not an issue with the Messaging process.\n  if (err instanceof TypeError || err instanceof RangeError) {\n    return err;\n  }\n\n  if (isAmqpError(err)) {\n    // translate\n    const condition = err.condition;\n    const description = err.description!;\n    const error = new MessagingError(description);\n    if ((err as any).stack) error.stack = (err as any).stack;\n    error.info = err.info;\n    if (condition) {\n      error.code = ConditionErrorNameMapper[condition as keyof typeof ConditionErrorNameMapper];\n    }\n    if (\n      description &&\n      (description.includes(\"status-code: 404\") ||\n        description.match(/The messaging entity .* could not be found.*/i) !== null)\n    ) {\n      error.code = \"MessagingEntityNotFoundError\";\n    }\n    if (error.code && retryableErrors.indexOf(error.code) === -1) {\n      // not found\n      error.retryable = false;\n    }\n    return error;\n  }\n\n  if (err.name === \"MessagingError\") {\n    // already translated\n    return err;\n  }\n\n  if (isSystemError(err)) {\n    // translate\n    const condition = err.code;\n    const description = err.message;\n    const error = new MessagingError(description, err);\n    let errorType = \"SystemError\";\n    if (condition) {\n      const amqpErrorCondition =\n        SystemErrorConditionMapper[condition as keyof typeof SystemErrorConditionMapper];\n      errorType =\n        ConditionErrorNameMapper[amqpErrorCondition as keyof typeof ConditionErrorNameMapper];\n    }\n    if (retryableErrors.indexOf(errorType) === -1) {\n      // not found\n      error.retryable = false;\n    }\n    return error;\n  }\n\n  if (isBrowserWebsocketError(err)) {\n    // Translate browser communication errors during opening handshake to generic ServiceCommunicationError\n    const error = new MessagingError(\"Websocket connection failed.\");\n    error.code = ConditionErrorNameMapper[ErrorNameConditionMapper.ServiceCommunicationError];\n    error.retryable = false;\n    return error;\n  }\n\n  // Some errors come from rhea-promise and need to be converted to MessagingError.\n  // A subset of these are also retryable.\n  if (rheaPromiseErrors.indexOf(err.name) !== -1) {\n    const error = new MessagingError(err.message, err);\n    error.code = err.name;\n    if (error.code && retryableErrors.indexOf(error.code) === -1) {\n      // not found\n      error.retryable = false;\n    }\n    return error;\n  }\n\n  return err;\n}\n\n/**\n * @internal\n */\nfunction isAmqpError(error: any): error is AmqpError {\n  return rheaIsAmqpError(error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { ConditionStatusMapper, translate } from \"./errors\";\nimport {\n  Connection,\n  EventContext,\n  Receiver,\n  ReceiverEvents,\n  ReceiverOptions,\n  ReqResLink,\n  Message as RheaMessage,\n  Sender,\n  SenderOptions,\n  Session,\n  generate_uuid,\n} from \"rhea-promise\";\nimport { Constants, StandardAbortMessage } from \"./util/constants\";\nimport { logErrorStackTrace, logger } from \"./log\";\nimport { isDefined } from \"./util/typeGuards\";\n\n/**\n * Describes the options that can be specified while sending a request.\n */\nexport interface SendRequestOptions {\n  /**\n   * Cancels the operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Max time to wait for the operation to complete.\n   * Default: `60000 milliseconds`.\n   */\n  timeoutInMs?: number;\n  /**\n   * Name of the request being performed.\n   */\n  requestName?: string;\n}\n\n/**\n * @internal\n */\nexport interface DeferredPromiseWithCallback {\n  resolve: (value?: any) => void;\n  reject: (reason?: any) => void;\n  /**\n   * To be called before resolving or rejecting the deferred promise\n   */\n  cleanupBeforeResolveOrReject: () => void;\n}\n\n/**\n * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.\n */\nexport class RequestResponseLink implements ReqResLink {\n  /**\n   * @param session - The amqp session.\n   * @param sender - The amqp sender link.\n   * @param receiver - The amqp receiver link.\n   */\n  constructor(public session: Session, public sender: Sender, public receiver: Receiver) {\n    this.session = session;\n    this.sender = sender;\n    this.receiver = receiver;\n    this.receiver.on(ReceiverEvents.message, (context) => {\n      onMessageReceived(context, this.connection.id, this._responsesMap);\n    });\n  }\n\n  /**\n   * Maintains a map of responses that\n   * are being actively returned. It acts as a store for correlating the responses received for\n   * the send requests.\n   */\n  private _responsesMap: Map<string, DeferredPromiseWithCallback> = new Map<\n    string,\n    DeferredPromiseWithCallback\n  >();\n\n  /**\n   * Provides the underlying amqp connection object.\n   * @returns Connection.\n   */\n  get connection(): Connection {\n    return this.session.connection;\n  }\n\n  /**\n   * Indicates whether the session and the sender and receiver links are all open or closed.\n   * @returns boolean - `true` - `open`, `false` - `closed`.\n   */\n  isOpen(): boolean {\n    return this.session.isOpen() && this.sender.isOpen() && this.receiver.isOpen();\n  }\n\n  /**\n   * Sends the given request message and returns the received response. If the operation is not\n   * completed in the provided timeout in milliseconds `default: 60000`, then `OperationTimeoutError` is thrown.\n   *\n   * @param request - The AMQP (request) message.\n   * @param options - Options that can be provided while sending a request.\n   * @returns Promise<Message> The AMQP (response) message.\n   */\n  sendRequest(request: RheaMessage, options: SendRequestOptions = {}): Promise<RheaMessage> {\n    const timeoutInMs = options.timeoutInMs || Constants.defaultOperationTimeoutInMs;\n\n    const aborter: AbortSignalLike | undefined = options.abortSignal;\n\n    // If message_id is not already set on the request, set it to a unique value\n    // This helps in determining the right response for current request among multiple incoming messages\n    if (!request.message_id) {\n      request.message_id = generate_uuid();\n    }\n\n    return new Promise<RheaMessage>((resolve: any, reject: any) => {\n      let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n\n      const rejectOnAbort = (): void => {\n        this._responsesMap.delete(request.message_id as string);\n        const address = this.receiver.address || \"address\";\n        const requestName = options.requestName;\n        const desc: string =\n          `[${this.connection.id}] The request \"${requestName}\" ` +\n          `to \"${address}\" has been cancelled by the user.`;\n        // Cancellation is a user-intended action, so log to info instead of warning.\n        logger.info(desc);\n        const error = new AbortError(StandardAbortMessage);\n\n        reject(error);\n      };\n\n      const onAbort = (): void => {\n        // safe to clear the timeout if it hasn't already occurred.\n        if (isDefined(timer)) {\n          clearTimeout(timer);\n        }\n        aborter!.removeEventListener(\"abort\", onAbort);\n\n        rejectOnAbort();\n      };\n\n      if (aborter) {\n        // the aborter may have been triggered between request attempts\n        // so check if it was triggered and reject if needed.\n        if (aborter.aborted) {\n          return rejectOnAbort();\n        }\n        aborter.addEventListener(\"abort\", onAbort);\n      }\n\n      timer = setTimeout(() => {\n        this._responsesMap.delete(request.message_id as string);\n        if (aborter) {\n          aborter.removeEventListener(\"abort\", onAbort);\n        }\n        const address = this.receiver.address || \"address\";\n        const desc: string =\n          `The request with message_id \"${request.message_id}\" to \"${address}\" ` +\n          `endpoint timed out. Please try again later.`;\n        const e: Error = {\n          name: \"OperationTimeoutError\",\n          message: desc,\n        };\n        return reject(translate(e));\n      }, timeoutInMs);\n\n      this._responsesMap.set(request.message_id as string, {\n        resolve: resolve,\n        reject: reject,\n        cleanupBeforeResolveOrReject: () => {\n          if (aborter) aborter.removeEventListener(\"abort\", onAbort);\n          if (isDefined(timer)) {\n            clearTimeout(timer);\n          }\n        },\n      });\n\n      logger.verbose(\n        \"[%s] %s request sent: %O\",\n        this.connection.id,\n        request.to || \"$management\",\n        request\n      );\n      this.sender.send(request);\n    });\n  }\n\n  /**\n   * Closes the sender, receiver link and the underlying session.\n   * @returns Promise<void>\n   */\n  async close(): Promise<void> {\n    await this.sender.close({ closeSession: false });\n    await this.receiver.close({ closeSession: false });\n    await this.session.close();\n  }\n\n  /**\n   * Removes the sender, receiver link and it's underlying session.\n   * @returns void\n   */\n  remove(): void {\n    this.sender.remove();\n    this.receiver.remove();\n    this.session.remove();\n  }\n\n  /**\n   * Creates an amqp request/response link.\n   *\n   * @param connection - The amqp connection.\n   * @param senderOptions - Options that must be provided to create the sender link.\n   * @param receiverOptions - Options that must be provided to create the receiver link.\n   * @param createOptions - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `create` invocation.\n   * @returns Promise<RequestResponseLink>\n   */\n  static async create(\n    connection: Connection,\n    senderOptions: SenderOptions,\n    receiverOptions: ReceiverOptions,\n    createOptions: { abortSignal?: AbortSignalLike } = {}\n  ): Promise<RequestResponseLink> {\n    const { abortSignal } = createOptions;\n    const session = await connection.createSession({ abortSignal });\n    const sender = await session.createSender({ ...senderOptions, abortSignal });\n    const receiver = await session.createReceiver({ ...receiverOptions, abortSignal });\n    logger.verbose(\n      \"[%s] Successfully created the sender and receiver links on the same session.\",\n      connection.id\n    );\n    return new RequestResponseLink(session, sender, receiver);\n  }\n}\n/**\n * @internal\n *\n * Type used in getCodeDescriptionAndError to get the normalized info from the responses emitted by EventHubs and ServiceBus.\n */\ntype NormalizedInfo = {\n  statusCode: number;\n  statusDescription: string;\n  errorCondition: string;\n};\n\n/**\n * @internal\n *\n * Handle different variations of property names in responses emitted by EventHubs and ServiceBus.\n */\nexport const getCodeDescriptionAndError = (\n  props: { [key: string]: string | number | undefined } = {}\n): NormalizedInfo => {\n  return {\n    statusCode: (props[Constants.statusCode] || props.statusCode) as number,\n    statusDescription: (props[Constants.statusDescription] || props.statusDescription) as string,\n    errorCondition: (props[Constants.errorCondition] || props.errorCondition) as string,\n  };\n};\n\n/**\n * This is used as the onMessage handler for the \"message\" event on the receiver.\n *\n * (This is inspired from the message settlement sequence in service-bus SDK which\n * relies on a single listener for settled event for all the messages.)\n * The sequence is as follows:\n * 1. User calls `await RequestResponseLink.sendRequest()`\n * 2. This creates a `Promise` that gets stored in the _responsesMap\n * 3. When the service acknowledges the response, this method gets called for that request.\n * 4. We resolve() the promise from the _responsesMap with the message.\n * 5. User's code after the sendRequest continues.\n *\n * @internal\n */\nexport function onMessageReceived(\n  context: Pick<EventContext, \"message\">,\n  connectionId: string,\n  responsesMap: Map<string, DeferredPromiseWithCallback>\n): void {\n  const message = context.message;\n  if (!message) {\n    logger.verbose(\n      `[${connectionId}] \"message\" property on the EventContext is \"undefined\" which is unexpected, ` +\n        `returning from the \"onMessageReceived\" handler without resolving or rejecting the promise ` +\n        `upon encountering the message event.`\n    );\n    return;\n  }\n\n  const responseCorrelationId = message.correlation_id;\n  if (!responsesMap.has(responseCorrelationId as string)) {\n    logger.verbose(\n      `[${connectionId}] correlationId \"${responseCorrelationId}\" property on the response does not match with ` +\n        `any of the \"request-id\"s in the map, returning from the \"onMessageReceived\" handler without resolving ` +\n        `or rejecting the promise upon encountering the message event.`\n    );\n    return;\n  }\n\n  const promise = responsesMap.get(responseCorrelationId as string) as DeferredPromiseWithCallback;\n  promise.cleanupBeforeResolveOrReject();\n\n  const deleteResult = responsesMap.delete(responseCorrelationId as string);\n  logger.verbose(\n    `[${connectionId}] Successfully deleted the response with id ${responseCorrelationId} from the map. ` +\n      `Delete result - ${deleteResult}`\n  );\n\n  const info = getCodeDescriptionAndError(message.application_properties);\n  let error;\n  if (!info.statusCode) {\n    error = new Error(\n      `[${connectionId}] No statusCode in the \"application_properties\" in the returned response with correlation-id: ${responseCorrelationId}`\n    );\n  }\n  if (info.statusCode > 199 && info.statusCode < 300) {\n    logger.verbose(\n      `[${connectionId}] Resolving the response with correlation-id: ${responseCorrelationId}`\n    );\n    return promise.resolve(message);\n  }\n  if (!error) {\n    const condition =\n      info.errorCondition || ConditionStatusMapper[info.statusCode] || \"amqp:internal-error\";\n    error = translate({\n      condition: condition,\n      description: info.statusDescription,\n    });\n    logger.warning(`${error?.name}: ${error?.message}`);\n  }\n  logErrorStackTrace(error);\n  return promise.reject(error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CONNREFUSED, TIMEOUT, resolve as dnsResolve } from \"dns\";\nimport { logger } from \"../log\";\n\n/**\n * Checks whether a network connection is detected.\n * @internal\n */\nexport function checkNetworkConnection(host: string): Promise<boolean> {\n  return new Promise((resolve) => {\n    logger.verbose(\"Calling dns.resolve to determine network connection status.\");\n    dnsResolve(host, function (err: any): void {\n      if (err) {\n        logger.verbose(\n          \"Error thrown from dns.resolve in network connection check: '%s', %O\",\n          err.code || err.name,\n          err\n        );\n        // List of possible DNS error codes: https://nodejs.org/dist/latest-v12.x/docs/api/dns.html#dns_error_codes\n        // We only resolve with `false` when dnsResolve fails with an error we expect to see when the network is down.\n        if (err.code === CONNREFUSED || err.code === TIMEOUT) {\n          return resolve(false);\n        }\n      } else {\n        logger.verbose(\"Successfully resolved host via dns.resolve in network connection check.\");\n      }\n\n      return resolve(true);\n    });\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport { MessagingError, translate } from \"./errors\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Constants } from \"./util/constants\";\nimport { checkNetworkConnection } from \"./util/checkNetworkConnection\";\nimport { delay } from \"./util/utils\";\nimport { logger } from \"./log\";\n\n/**\n * Determines whether the object is a Delivery object.\n * @internal\n */\nfunction isDelivery(obj: any): boolean {\n  let result: boolean = false;\n  if (\n    obj &&\n    typeof obj.id === \"number\" &&\n    typeof obj.settled === \"boolean\" &&\n    typeof obj.remote_settled === \"boolean\" &&\n    typeof obj.format === \"number\"\n  ) {\n    result = true;\n  }\n  return result;\n}\n\n/**\n * Describes the Retry Mode type\n */\nexport enum RetryMode {\n  Exponential,\n  Fixed,\n}\n\n/**\n * Describes the retry operation type.\n */\nexport enum RetryOperationType {\n  cbsAuth = \"cbsAuth\",\n  connection = \"connection\",\n  management = \"management\",\n  receiverLink = \"receiverLink\",\n  senderLink = \"senderLink\",\n  sendMessage = \"sendMessage\",\n  receiveMessage = \"receiveMessage\",\n  session = \"session\",\n  messageSettlement = \"settlement\",\n}\n\n/**\n * Retry policy options that determine the mode, number of retries, retry interval etc.\n */\nexport interface RetryOptions {\n  /**\n   * Number of times the operation needs to be retried in case\n   * of retryable error. Default: 3.\n   */\n  maxRetries?: number;\n  /**\n   * Amount of time to wait in milliseconds before making the\n   * next attempt. Default: `30000 milliseconds`.\n   * When `mode` option is set to `Exponential`,\n   * this is used to compute the exponentially increasing delays between retries.\n   */\n  retryDelayInMs?: number;\n  /**\n   * Number of milliseconds to wait before declaring that current attempt has timed out which will trigger a retry\n   * A minimum value of `60000` milliseconds will be used if a value not greater than this is provided.\n   */\n  timeoutInMs?: number;\n  /**\n   * Denotes which retry mode to apply. If undefined, defaults to `Fixed`\n   */\n  mode?: RetryMode;\n  /**\n   * Denotes the maximum delay between retries\n   * that the retry attempts will be capped at. Applicable only when performing exponential retry.\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * Describes the parameters that need to be configured for the retry operation.\n */\nexport interface RetryConfig<T> {\n  /**\n   * The operation that needs to be retried.\n   */\n  operation: () => Promise<T>;\n  /**\n   * The connection identifier. Used in logging information.\n   * Extremely useful when multiple connections are logged in the same file.\n   */\n  connectionId: string;\n  /**\n   * The name/type of operation to be performed.\n   * Extremely useful in providing better debug logs.\n   */\n  operationType: RetryOperationType;\n  /**\n   * The host \"<yournamespace>.servicebus.windows.net\".\n   * Used to check network connectivity.\n   */\n  connectionHost?: string;\n  /**\n   * The retry related options associated with given operation execution.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * The `AbortSignal` associated with the operation being retried on.\n   * If this signal is fired during the wait time between retries, then the `retry()` method will ensure that the wait is abandoned and the retry process gets cancelled. If this signal is fired when the operation is in progress, then the operation is expected to react to it.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Validates the retry config.\n * @internal\n */\nfunction validateRetryConfig<T>(config: RetryConfig<T>): void {\n  if (!config.operation) {\n    throw new TypeError(\"Missing 'operation' in retry configuration\");\n  }\n\n  if (!config.connectionId) {\n    throw new TypeError(\"Missing 'connectionId' in retry configuration\");\n  }\n\n  if (!config.operationType) {\n    throw new TypeError(\"Missing 'operationType' in retry configuration\");\n  }\n}\n\n/**\n * Calculates delay between retries, in milliseconds.\n * @internal\n */\nfunction calculateDelay(\n  attemptCount: number,\n  retryDelayInMs: number,\n  maxRetryDelayInMs: number,\n  mode: RetryMode\n): number {\n  if (mode === RetryMode.Exponential) {\n    const boundedRandDelta =\n      retryDelayInMs * 0.8 +\n      Math.floor(Math.random() * (retryDelayInMs * 1.2 - retryDelayInMs * 0.8));\n\n    const incrementDelta = boundedRandDelta * (Math.pow(2, attemptCount) - 1);\n    return Math.min(incrementDelta, maxRetryDelayInMs);\n  }\n\n  return retryDelayInMs;\n}\n\n/**\n * Every operation is attempted at least once. Additional attempts are made if the previous attempt failed\n * with a retryable error. The number of additional attempts is governed by the `maxRetries` property provided\n * on the `RetryConfig` argument.\n *\n * If `mode` option is set to `Fixed`, then the retries are made on the\n * given operation for a specified number of times, with a fixed delay in between each retry each time.\n *\n * If `mode` option is set to `Exponential`, then the delay between retries is adjusted to increase\n * exponentially with each attempt using back-off factor of power 2.\n *\n * @param config - Parameters to configure retry operation\n *\n * @returns Promise<T>.\n */\nexport async function retry<T>(config: RetryConfig<T>): Promise<T> {\n  validateRetryConfig(config);\n  if (!config.retryOptions) {\n    config.retryOptions = {};\n  }\n  if (config.retryOptions.maxRetries == undefined || config.retryOptions.maxRetries < 0) {\n    config.retryOptions.maxRetries = Constants.defaultMaxRetries;\n  }\n  if (config.retryOptions.retryDelayInMs == undefined || config.retryOptions.retryDelayInMs < 0) {\n    config.retryOptions.retryDelayInMs = Constants.defaultDelayBetweenOperationRetriesInMs;\n  }\n  if (\n    config.retryOptions.maxRetryDelayInMs == undefined ||\n    config.retryOptions.maxRetryDelayInMs < 0\n  ) {\n    config.retryOptions.maxRetryDelayInMs = Constants.defaultMaxDelayForExponentialRetryInMs;\n  }\n  if (config.retryOptions.mode == undefined) {\n    config.retryOptions.mode = RetryMode.Fixed;\n  }\n  let lastError: MessagingError | undefined;\n  let result: any;\n  let success = false;\n  const totalNumberOfAttempts = config.retryOptions.maxRetries + 1;\n  for (let i = 1; i <= totalNumberOfAttempts; i++) {\n    logger.verbose(\n      \"[%s] Attempt number for '%s': %d.\",\n      config.connectionId,\n      config.operationType,\n      i\n    );\n    try {\n      result = await config.operation();\n      success = true;\n      logger.verbose(\n        \"[%s] Success for '%s', after attempt number: %d.\",\n        config.connectionId,\n        config.operationType,\n        i\n      );\n      if (result && !isDelivery(result)) {\n        logger.verbose(\n          \"[%s] Success result for '%s': %O\",\n          config.connectionId,\n          config.operationType,\n          result\n        );\n      }\n      break;\n    } catch (_err) {\n      let err = _err;\n      if (!err.translated) {\n        err = translate(err);\n      }\n\n      if (!err.retryable && err.name === \"ServiceCommunicationError\" && config.connectionHost) {\n        const isConnected = await checkNetworkConnection(config.connectionHost);\n        if (!isConnected) {\n          err.name = \"ConnectionLostError\";\n          err.retryable = true;\n        }\n      }\n      lastError = err;\n      logger.verbose(\n        \"[%s] Error occurred for '%s' in attempt number %d: %O\",\n        config.connectionId,\n        config.operationType,\n        i,\n        err\n      );\n\n      if (lastError && lastError.retryable && totalNumberOfAttempts > i) {\n        const targetDelayInMs = calculateDelay(\n          i,\n          config.retryOptions.retryDelayInMs,\n          config.retryOptions.maxRetryDelayInMs,\n          config.retryOptions.mode\n        );\n        logger.verbose(\n          \"[%s] Sleeping for %d milliseconds for '%s'.\",\n          config.connectionId,\n          targetDelayInMs,\n          config.operationType\n        );\n        await delay(\n          targetDelayInMs,\n          config.abortSignal,\n          `The retry operation has been cancelled by the user.`\n        );\n        continue;\n      } else {\n        break;\n      }\n    }\n  }\n  if (success) {\n    return result;\n  } else {\n    throw lastError;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Describes the type of supported tokens.\n */\nexport enum TokenType {\n  /**\n   * The \"jwt\" token type. Used with AADTokenCredential.\n   */\n  CbsTokenTypeJwt = \"jwt\",\n  /**\n   * The sas token type. Used with SharedKeyCredential.\n   */\n  CbsTokenTypeSas = \"servicebus.windows.net:sastoken\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { WebSocketImpl } from \"rhea-promise\";\nimport { isDefined } from \"../util/typeGuards\";\nimport { parseConnectionString } from \"../util/utils\";\n\n/**\n * Describes the options that can be provided while creating a connection config.\n */\nexport interface ConnectionConfigOptions {\n  /**\n   * Indicates whether the entity path is required in the\n   * connection config.\n   */\n  isEntityPathRequired?: boolean;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub or ServiceBus\n * connection string.\n */\nexport interface ConnectionConfig {\n  /**\n   * The service bus endpoint\n   * \"sb://<yournamespace>.servicebus.windows.net/\".\n   */\n  endpoint: string;\n  /**\n   * The DNS hostname or IP address of the service.\n   * Typically of the form \"<yournamespace>.servicebus.windows.net\" unless connecting\n   * to the service through an intermediary.\n   */\n  host: string;\n  /**\n   * The fully qualified name of the host to connect to.\n   * This field can be used by AMQP proxies to determine the correct back-end service to\n   * connect the client to.\n   * Typically of the form \"<yournamespace>.servicebus.windows.net\".\n   */\n  amqpHostname?: string;\n  /**\n   * The port number.\n   */\n  port?: number;\n  /**\n   * The connection string.\n   */\n  connectionString: string;\n  /**\n   * The name/path of the entity (hub/queue/topic name) to which the\n   * connection needs to happen.\n   */\n  entityPath?: string;\n  /**\n   * The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * The secret value of the access key.\n   */\n  sharedAccessKey: string;\n\n  /**\n   * The WebSocket constructor used to create an AMQP connection\n   * over a WebSocket. In browsers, the built-in WebSocket will be  used by default. In Node, a\n   * TCP socket will be used if a WebSocket constructor is not provided.\n   */\n  webSocket?: WebSocketImpl;\n\n  /**\n   * The path for the endpoint that accepts an AMQP\n   * connection over WebSockets.\n   */\n  webSocketEndpointPath?: string;\n\n  /**\n   * Options to be passed to the WebSocket constructor\n   */\n  webSocketConstructorOptions?: any;\n}\n\n/**\n * Describes the ConnectionConfig module\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const ConnectionConfig = {\n  /**\n   * Creates the connection config.\n   * @param connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param path - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns ConnectionConfig\n   */\n  create(connectionString: string, path?: string): ConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<{\n      Endpoint: string;\n      SharedAccessKeyName: string;\n      SharedAccessKey: string;\n      EntityPath?: string;\n    }>(connectionString);\n    if (!parsedCS.Endpoint) {\n      throw new TypeError(\"Missing Endpoint in Connection String.\");\n    }\n\n    if (!parsedCS.Endpoint.endsWith(\"/\")) parsedCS.Endpoint += \"/\";\n\n    const result: ConnectionConfig = {\n      connectionString: connectionString,\n      endpoint: parsedCS.Endpoint,\n      host: parsedCS && parsedCS.Endpoint ? (parsedCS.Endpoint.match(\".*://([^/]*)\") || [])[1] : \"\",\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey,\n    };\n\n    if (path || parsedCS.EntityPath) {\n      result.entityPath = path || parsedCS.EntityPath;\n    }\n    return result;\n  },\n\n  /**\n   * Validates the properties of connection config.\n   * @param config - The connection config to be validated.\n   * @returns void\n   */\n  validate(config: ConnectionConfig, options?: ConnectionConfigOptions): void {\n    if (!options) options = {};\n\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.endpoint) {\n      throw new TypeError(\"Missing 'endpoint' in configuration\");\n    }\n    config.endpoint = String(config.endpoint);\n\n    if (!config.host) {\n      throw new TypeError(\"Missing 'host' in configuration\");\n    }\n    config.host = String(config.host);\n\n    if (options.isEntityPathRequired && !config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    if (isDefined(config.entityPath)) {\n      config.entityPath = String(config.entityPath);\n    }\n\n    if (!isSharedAccessSignature(config.connectionString)) {\n      if (!config.sharedAccessKeyName) {\n        throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n      }\n      config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n      if (!config.sharedAccessKey) {\n        throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n      }\n      config.sharedAccessKey = String(config.sharedAccessKey);\n    }\n  },\n};\n\n/**\n * @internal\n */\nexport function isSharedAccessSignature(connectionString: string): boolean {\n  return connectionString.match(/;{0,1}SharedAccessSignature=SharedAccessSignature /) != null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  Connection,\n  EventContext,\n  ReceiverEvents,\n  ReceiverOptions,\n  Message as RheaMessage,\n  SenderEvents,\n  SenderOptions,\n  generate_uuid,\n} from \"rhea-promise\";\nimport { logErrorStackTrace, logger } from \"./log\";\nimport { Constants } from \"./util/constants\";\nimport { RequestResponseLink } from \"./requestResponseLink\";\nimport { StandardAbortMessage } from \"./util/constants\";\nimport { TokenType } from \"./auth/token\";\nimport { defaultCancellableLock } from \"./util/utils\";\nimport { translate } from \"./errors\";\n\n/**\n * Describes the CBS Response.\n */\nexport interface CbsResponse {\n  correlationId: string;\n  statusCode: string;\n  statusDescription: string;\n}\n\n/**\n * Describes the EventHub/ServiceBus Cbs client that talks to the $cbs endpoint over AMQP connection.\n */\nexport class CbsClient {\n  /**\n   * CBS endpoint - \"$cbs\"\n   */\n  readonly endpoint: string = Constants.cbsEndpoint;\n  /**\n   * CBS replyTo - The receiver link name that the service should reply to.\n   */\n  readonly replyTo: string = `${Constants.cbsReplyTo}-${generate_uuid()}`;\n  /**\n   * The unique lock name per $cbs session per connection that is used to\n   * acquire the lock for establishing a cbs session if one does not exist for an amqp connection.\n   */\n  readonly cbsLock: string = `${Constants.negotiateCbsKey}-${generate_uuid()}`;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection if one does not exist.\n   */\n  readonly connectionLock: string;\n  /**\n   * The AMQP connection.\n   */\n  connection: Connection;\n\n  /**\n   * CBS sender, receiver on the same session.\n   */\n  private _cbsSenderReceiverLink?: RequestResponseLink;\n\n  /**\n   * @param connection - The AMQP connection.\n   * @param connectionLock - A unique string (usually a guid) per connection.\n   */\n  constructor(connection: Connection, connectionLock: string) {\n    this.connection = connection;\n    this.connectionLock = connectionLock;\n  }\n\n  /**\n   * Creates a singleton instance of the CBS session if it hasn't been initialized previously on\n   * the given connection.\n   * @param options - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `init` invocation.\n   * @returns Promise<void>.\n   */\n  async init(options: { abortSignal?: AbortSignalLike; timeoutInMs?: number } = {}): Promise<void> {\n    const { abortSignal, timeoutInMs } = options;\n\n    try {\n      if (abortSignal?.aborted) {\n        throw new AbortError(StandardAbortMessage);\n      }\n\n      // Acquire the lock and establish an amqp connection if it does not exist.\n      if (!this.connection.isOpen()) {\n        logger.verbose(\"The CBS client is trying to establish an AMQP connection.\");\n        await defaultCancellableLock.acquire(\n          this.connectionLock,\n          () => {\n            return this.connection.open({ abortSignal });\n          },\n          { abortSignal: abortSignal, timeoutInMs: timeoutInMs }\n        );\n      }\n\n      if (!this.isOpen()) {\n        const rxOpt: ReceiverOptions = {\n          source: {\n            address: this.endpoint,\n          },\n          name: this.replyTo,\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            logger.verbose(\n              \"[%s] An error occurred on the session for request/response links \" + \"for $cbs: %O\",\n              id,\n              ehError\n            );\n          },\n        };\n        const srOpt: SenderOptions = { target: { address: this.endpoint } };\n        logger.verbose(\n          \"[%s] Creating sender/receiver links on a session for $cbs endpoint.\",\n          this.connection.id\n        );\n        this._cbsSenderReceiverLink = await RequestResponseLink.create(\n          this.connection,\n          srOpt,\n          rxOpt,\n          { abortSignal }\n        );\n        this._cbsSenderReceiverLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          logger.verbose(\"[%s] An error occurred on the cbs sender link.. %O\", id, ehError);\n        });\n        this._cbsSenderReceiverLink.receiver.on(\n          ReceiverEvents.receiverError,\n          (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.receiver!.error!);\n            logger.verbose(\"[%s] An error occurred on the cbs receiver link.. %O\", id, ehError);\n          }\n        );\n        logger.verbose(\n          \"[%s] Successfully created the cbs sender '%s' and receiver '%s' \" +\n            \"links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink.sender.name,\n          this._cbsSenderReceiverLink.receiver.name\n        );\n      } else {\n        logger.verbose(\n          \"[%s] CBS session is already present. Reusing the cbs sender '%s' \" +\n            \"and receiver '%s' links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink!.sender.name,\n          this._cbsSenderReceiverLink!.receiver.name\n        );\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] An error occurred while establishing the cbs links: %s\",\n        this.connection.id,\n        `${translatedError?.name}: ${translatedError?.message}`\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Negotiates the CBS claim with the EventHub/ServiceBus Service.\n   * @param audience - The entity token audience for which the token is requested in one\n   * of the following forms:\n   *\n   * - **ServiceBus**\n   *    - **Sender**\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **Receiver**\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   *\n   * - **EventHubs**\n   *     - **Sender**\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   *     - **Receiver**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   *     - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   * @param token - The token that needs to be sent in the put-token request.\n   * @param tokenType - The type of token being used. For example, 'jwt' or 'servicebus.windows.net:sastoken'.\n   * @param options - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `negotiateClaim` invocation.\n   * @returns A Promise that resolves when $cbs authentication is successful\n   * and rejects when an error occurs during $cbs authentication.\n   */\n  async negotiateClaim(\n    audience: string,\n    token: string,\n    tokenType: TokenType,\n    options: { abortSignal?: AbortSignalLike; timeoutInMs?: number } = {}\n  ): Promise<CbsResponse> {\n    const { abortSignal, timeoutInMs } = options;\n    try {\n      if (abortSignal?.aborted) {\n        throw new AbortError(StandardAbortMessage);\n      }\n\n      if (!this._cbsSenderReceiverLink) {\n        throw new Error(\"Attempted to negotiate a claim but the CBS link does not exist.\");\n      }\n\n      const request: RheaMessage = {\n        body: token,\n        message_id: generate_uuid(),\n        reply_to: this.replyTo,\n        to: this.endpoint,\n        application_properties: {\n          operation: Constants.operationPutToken,\n          name: audience,\n          type: tokenType,\n        },\n      };\n      const responseMessage = await this._cbsSenderReceiverLink.sendRequest(request, {\n        abortSignal,\n        timeoutInMs,\n        requestName: \"negotiateClaim\",\n      });\n      logger.verbose(\"[%s] The CBS response is: %O\", this.connection.id, responseMessage);\n      return this._fromRheaMessageResponse(responseMessage);\n    } catch (err) {\n      logger.warning(\n        \"[%s] An error occurred while negotiating the cbs claim: %s\",\n        this.connection.id,\n        `${err?.name}: ${err?.message}`\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Closes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns\n   */\n  async close(): Promise<void> {\n    try {\n      if (this.isOpen()) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        await cbsLink!.close();\n        logger.verbose(\"[%s] Successfully closed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the cbs link: ${\n        err.stack || JSON.stringify(err)\n      }.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Removes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * @returns void\n   */\n  remove(): void {\n    try {\n      if (this._cbsSenderReceiverLink) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        cbsLink!.remove();\n        logger.verbose(\"[%s] Successfully removed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while removing the cbs link: ${\n        err.stack || JSON.stringify(err)\n      }.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Indicates whether the cbs sender receiver link is open or closed.\n   * @returns `true` open, `false` closed.\n   */\n  public isOpen(): boolean {\n    return Boolean(this._cbsSenderReceiverLink?.isOpen());\n  }\n\n  private _fromRheaMessageResponse(msg: RheaMessage): CbsResponse {\n    const cbsResponse = {\n      correlationId: msg.correlation_id! as string,\n      statusCode: msg.application_properties ? msg.application_properties[\"status-code\"] : \"\",\n      statusDescription: msg.application_properties\n        ? msg.application_properties[\"status-description\"]\n        : \"\",\n    };\n    logger.verbose(\"[%s] The deserialized CBS response is: %o\", this.connection.id, cbsResponse);\n    return cbsResponse;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport { MessageHeader as RheaMessageHeader } from \"rhea-promise\";\nimport { logger } from \"./log\";\n\n/**\n * Describes the defined set of standard header properties of the message.\n */\nexport interface AmqpMessageHeader {\n  /**\n   * If this value is true, then this message has not been\n   * acquired by any other link. If this value is false, then this message MAY have previously\n   * been acquired by another link or links.\n   */\n  firstAcquirer?: boolean;\n  /**\n   * The number of prior unsuccessful delivery attempts.\n   */\n  deliveryCount?: number;\n  /**\n   * time to live in ms.\n   */\n  timeToLive?: number;\n  /**\n   * Specifies durability requirements.\n   */\n  durable?: boolean;\n  /**\n   * The relative message priority. Higher numbers indicate higher\n   * priority messages.\n   */\n  priority?: number;\n}\n\n/**\n * Describes the operations that can be performed on the message header.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const AmqpMessageHeader = {\n  /**\n   * Converts MessageHeader to RheaMessageHeader.\n   *\n   * @param props - Message header.\n   * @returns RheaMessageHeader\n   */\n  toRheaMessageHeader(props: AmqpMessageHeader): RheaMessageHeader {\n    const amqpHeader: RheaMessageHeader = {};\n    if (props.deliveryCount != undefined) {\n      amqpHeader.delivery_count = props.deliveryCount;\n    }\n    if (props.durable != undefined) amqpHeader.durable = props.durable;\n    if (props.firstAcquirer != undefined) {\n      amqpHeader.first_acquirer = props.firstAcquirer;\n    }\n    if (props.priority != undefined) {\n      amqpHeader.priority = props.priority;\n    }\n    if (props.timeToLive != undefined) {\n      amqpHeader.ttl = props.timeToLive;\n    }\n    logger.verbose(\"To RheaMessageHeader: %O\", amqpHeader);\n    return amqpHeader;\n  },\n\n  /**\n   * Converts RheaMessageHeader to MessageHeader.\n   *\n   * @param props - Amqp Message Header\n   * @returns MessageHeader.\n   */\n  fromRheaMessageHeader(props: RheaMessageHeader): AmqpMessageHeader {\n    const msgHeader: AmqpMessageHeader = {};\n    if (props.delivery_count != undefined) {\n      msgHeader.deliveryCount = props.delivery_count;\n    }\n    if (props.durable != undefined) {\n      msgHeader.durable = props.durable;\n    }\n    if (props.first_acquirer != undefined) {\n      msgHeader.firstAcquirer = props.first_acquirer;\n    }\n    if (props.priority != undefined) {\n      msgHeader.priority = props.priority;\n    }\n    if (props.ttl != undefined) {\n      msgHeader.timeToLive = props.ttl;\n    }\n    logger.verbose(\"From RheaMessageHeader: %O\", msgHeader);\n    return msgHeader;\n  },\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport { MessageProperties as RheaMessageProperties } from \"rhea-promise\";\nimport { logger } from \"./log\";\n\n/**\n * Describes the defined set of standard properties of the message.\n */\nexport interface AmqpMessageProperties {\n  /**\n   * The application message identifier that uniquely identifies a message.\n   * The user is responsible for making sure that this is unique in the given context. Guids usually make a good fit.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * The address of the node to send replies to.\n   */\n  replyTo?: string;\n  /**\n   * The address of the node the message is destined for.\n   */\n  to?: string;\n  /**\n   * The id that can be used to mark or identify messages between clients.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * MIME type for the message.\n   */\n  contentType?: string;\n  /**\n   * The content-encoding property is used as a modifier to the content-type.\n   * When present, its value indicates what additional content encodings have been applied to the application-data.\n   */\n  contentEncoding?: string;\n  /**\n   * The time when this message is considered expired.\n   */\n  absoluteExpiryTime?: number;\n  /**\n   * The time this message was created.\n   */\n  creationTime?: number;\n  /**\n   * The group this message belongs to.\n   */\n  groupId?: string;\n  /**\n   * The sequence number of this message with its group.\n   */\n  groupSequence?: number;\n  /**\n   * The group the reply message belongs to.\n   */\n  replyToGroupId?: string;\n  /**\n   * A common field for summary information about the message\n   * content and purpose.\n   */\n  subject?: string;\n  // /**\n  //  * The identity of the user responsible for producing the message.\n  //  */\n  // userId?: string;\n}\n\n/**\n * Describes the operations that can be performed on the amqp message properties.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const AmqpMessageProperties = {\n  /**\n   * Converts MessageProperties to RheaMessageProperties.\n   * @param props - Message properties.\n   * @returns RheaMessageProperties.\n   */\n  toRheaMessageProperties(props: AmqpMessageProperties): RheaMessageProperties {\n    const amqpProperties: RheaMessageProperties = {};\n    if (props.absoluteExpiryTime != undefined) {\n      amqpProperties.absolute_expiry_time = new Date(props.absoluteExpiryTime);\n    }\n    if (props.contentEncoding != undefined) {\n      amqpProperties.content_encoding = props.contentEncoding;\n    }\n    if (props.contentType != undefined) {\n      amqpProperties.content_type = props.contentType;\n    }\n    if (props.correlationId != undefined) {\n      amqpProperties.correlation_id = props.correlationId;\n    }\n    if (props.creationTime != undefined) {\n      amqpProperties.creation_time = new Date(props.creationTime);\n    }\n    if (props.groupId != undefined) {\n      amqpProperties.group_id = props.groupId;\n    }\n    if (props.groupSequence != undefined) {\n      amqpProperties.group_sequence = props.groupSequence;\n    }\n    if (props.messageId != undefined) {\n      amqpProperties.message_id = props.messageId;\n    }\n    if (props.replyTo != undefined) {\n      amqpProperties.reply_to = props.replyTo;\n    }\n    if (props.replyToGroupId != undefined) {\n      amqpProperties.reply_to_group_id = props.replyToGroupId;\n    }\n    if (props.subject != undefined) {\n      amqpProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      amqpProperties.to = props.to;\n    }\n    // if (props.userId != undefined) {\n    //   amqpProperties.user_id = props.userId;\n    // }\n\n    logger.verbose(\"To RheaMessageProperties: %O\", amqpProperties);\n    return amqpProperties;\n  },\n\n  /**\n   * Converts RheaMessageProperties to MessageProperties.\n   * @param props - Amqp message properties.\n   * @returns MessageProperties.\n   */\n  fromRheaMessageProperties(props: RheaMessageProperties): AmqpMessageProperties {\n    const msgProperties: AmqpMessageProperties = {};\n    if (props.absolute_expiry_time != undefined) {\n      msgProperties.absoluteExpiryTime = props.absolute_expiry_time.getTime();\n    }\n    if (props.content_encoding != undefined) {\n      msgProperties.contentEncoding = props.content_encoding;\n    }\n    if (props.content_type != undefined) {\n      msgProperties.contentType = props.content_type;\n    }\n    if (props.correlation_id != undefined) {\n      msgProperties.correlationId = props.correlation_id;\n    }\n    if (props.creation_time != undefined) {\n      msgProperties.creationTime = props.creation_time.getTime();\n    }\n    if (props.group_id != undefined) {\n      msgProperties.groupId = props.group_id;\n    }\n    if (props.group_sequence != undefined) {\n      msgProperties.groupSequence = props.group_sequence;\n    }\n    if (props.message_id != undefined) {\n      msgProperties.messageId = props.message_id;\n    }\n    if (props.reply_to != undefined) {\n      msgProperties.replyTo = props.reply_to;\n    }\n    if (props.reply_to_group_id != undefined) {\n      msgProperties.replyToGroupId = props.reply_to_group_id;\n    }\n    if (props.subject != undefined) {\n      msgProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      msgProperties.to = props.to;\n    }\n    // if (props.user_id != undefined) {\n    //   msgProperties.userId = props.user_id;\n    // }\n\n    logger.verbose(\"From RheaMessageProperties: %O\", msgProperties);\n    return msgProperties;\n  },\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as os from \"os\";\n\n/**\n * Returns information about the platform this function is being run on.\n * @internal\n */\nexport function getPlatformInfo(): string {\n  return `(${os.arch()}-${os.type()}-${os.release()})`;\n}\n\n/**\n * Returns information about Node.js this function is being run on.\n * @internal\n */\nexport function getFrameworkInfo(): string {\n  return `Node/${process.version}`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AwaitableSender,\n  Connection,\n  ConnectionOptions,\n  CreateAwaitableSenderOptions,\n  CreateReceiverOptions,\n  CreateSenderOptions,\n  Receiver,\n  Sender,\n  generate_uuid,\n} from \"rhea-promise\";\nimport { getFrameworkInfo, getPlatformInfo } from \"./util/runtimeInfo\";\nimport { CbsClient } from \"./cbs\";\nimport { ConnectionConfig } from \"./connectionConfig/connectionConfig\";\nimport { Constants } from \"./util/constants\";\nimport { isNode } from \"./util/utils\";\n\n/**\n * Provides contextual information like the underlying amqp connection, cbs session, tokenProvider,\n * Connection config, data transformer, etc.\n */\nexport interface ConnectionContextBase {\n  /**\n   * The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: ConnectionConfig;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection per client if one does not exist.\n   */\n  connectionLock: string;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for negotiating cbs claim by an entity on that connection.\n   */\n  negotiateClaimLock: string;\n  /**\n   * The underlying AMQP connection.\n   */\n  connection: Connection;\n  /**\n   * The amqp connection id that uniquely identifies the\n   * connection within a process.\n   */\n  connectionId: string;\n  /**\n   * Indicates whether the close() method was\n   * called on the connection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * A reference to the cbs session ($cbs endpoint) on the\n   * underlying AMQP connection for the EventHub Client.\n   */\n  cbsSession: CbsClient;\n  /**\n   * Updates the context to use a new underlying AMQP connection and new cbs session.\n   */\n  refreshConnection: () => void;\n}\n\n/**\n * Defines the properties that need to be set while establishing the AMQP connection.\n */\nexport interface ConnectionProperties {\n  /**\n   * The name of the product that will be populated as the AMQP\n   * connection property. Example: \"MSJSClient\".\n   */\n  product: string;\n  /**\n   * The version of the package/sdk that is making the AMQP connection.\n   */\n  version: string;\n  /**\n   * The userAgent that needs to be set as the AMQP connection\n   * property. Example: `\"/js-service-bus\"` or `\"/js-event-hubs,/js-event-processor-host=1.0.0\"`.\n   */\n  userAgent: string;\n}\n\n/**\n * Describes the parameters that can be provided to create the base connection context.\n */\nexport interface CreateConnectionContextBaseParameters {\n  /**\n   * The connection config that is created by parsing the\n   * connection string.\n   */\n  config: ConnectionConfig;\n  /**\n   * Properties to be provided while creating\n   * the AMQP connection.\n   */\n  connectionProperties: ConnectionProperties;\n  /**\n   * Determines whether entity path should be a part of\n   * the connection config. If `true` it must be present, `false` otherwise. Default value false.\n   */\n  isEntityPathRequired?: boolean;\n  /**\n   * The duration in which the promise should\n   * complete (resolve/reject). If it is not completed, then the Promise will be rejected after\n   * timeout occurs. Default: `60000 milliseconds`.\n   */\n  operationTimeoutInMs?: number;\n}\n\nconst maxListenerLimit = 1000;\n\nclass CoreAmqpConnection extends Connection {\n  /**\n   * Creates an amqp sender link. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create a sender link.\n   * @returns Promise<Sender>.\n   */\n  async createSender(options?: CreateSenderOptions): Promise<Sender> {\n    const sender = await super.createSender(options);\n    sender.setMaxListeners(maxListenerLimit);\n    return sender;\n  }\n\n  /**\n   * Creates an awaitable amqp sender. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create an awaitable sender link.\n   * - If `onError` and `onSessionError` handlers are not provided then the `AwaitableSender` will\n   * clear the timer and reject the Promise for all the entries of inflight send operation in its\n   * `deliveryDispositionMap`.\n   * - If the user is handling the reconnection of sender link or the underlying connection in it's\n   * app, then the `onError` and `onSessionError` handlers must be provided by the user and (s)he\n   * shall be responsible of clearing the `deliveryDispositionMap` of inflight `send()` operation.\n   *\n   * @returns Promise<AwaitableSender>.\n   */\n  async createAwaitableSender(options?: CreateAwaitableSenderOptions): Promise<AwaitableSender> {\n    const sender = await super.createAwaitableSender(options);\n    sender.setMaxListeners(maxListenerLimit);\n    return sender;\n  }\n\n  /**\n   * Creates an amqp receiver link. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create a receiver link.\n   * @returns Promise<Receiver>.\n   */\n  async createReceiver(options?: CreateReceiverOptions): Promise<Receiver> {\n    const receiver = await super.createReceiver(options);\n    receiver.setMaxListeners(maxListenerLimit);\n    return receiver;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const ConnectionContextBase = {\n  /**\n   * Creates the base connection context.\n   * @param parameters - Parameters to be provided to create\n   * the base connection context.\n   */\n  create(parameters: CreateConnectionContextBaseParameters): ConnectionContextBase {\n    ConnectionConfig.validate(parameters.config, {\n      isEntityPathRequired: parameters.isEntityPathRequired || false,\n    });\n    const userAgent = parameters.connectionProperties.userAgent;\n    if (userAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`\n      );\n    }\n\n    const connectionOptions: ConnectionOptions = {\n      transport: Constants.TLS,\n      host: parameters.config.host,\n      hostname: parameters.config.amqpHostname ?? parameters.config.host,\n      username: parameters.config.sharedAccessKeyName,\n      port: parameters.config.port ?? 5671,\n      reconnect: false,\n      properties: {\n        product: parameters.connectionProperties.product,\n        version: parameters.connectionProperties.version,\n        \"user-agent\": userAgent,\n        platform: getPlatformInfo(),\n        framework: getFrameworkInfo(),\n      },\n      idle_time_out: Constants.defaultConnectionIdleTimeoutInMs,\n      operationTimeoutInSeconds: parameters.operationTimeoutInMs\n        ? parameters.operationTimeoutInMs / 1000\n        : undefined,\n    };\n\n    if (\n      parameters.config.webSocket ||\n      (!isNode && typeof self !== \"undefined\" && (self as any).WebSocket)\n    ) {\n      const socket = parameters.config.webSocket || (self as any).WebSocket;\n      const host = parameters.config.host;\n      const endpoint = parameters.config.webSocketEndpointPath || \"\";\n      const socketOptions = parameters.config.webSocketConstructorOptions || {};\n      const port = parameters.config.port ?? 443;\n\n      connectionOptions.webSocketOptions = {\n        webSocket: socket,\n        url: `wss://${host}:${port}/${endpoint}`,\n        protocol: [\"AMQPWSB10\"],\n        options: socketOptions,\n      };\n    }\n\n    const connection = new CoreAmqpConnection(connectionOptions);\n    const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n    const connectionContextBase: ConnectionContextBase = {\n      wasConnectionCloseCalled: false,\n      connectionLock: connectionLock,\n      negotiateClaimLock: `${Constants.negotiateClaim}-${generate_uuid()}`,\n      connection: connection,\n      connectionId: connection.id,\n      cbsSession: new CbsClient(connection, connectionLock),\n      config: parameters.config,\n      refreshConnection() {\n        const newConnection = new CoreAmqpConnection(connectionOptions);\n        const newConnectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n        this.wasConnectionCloseCalled = false;\n        this.connectionLock = newConnectionLock;\n        this.negotiateClaimLock = `${Constants.negotiateClaim} - ${generate_uuid()}`;\n        this.connection = newConnection;\n        this.connectionId = newConnection.id;\n        this.cbsSession = new CbsClient(newConnection, newConnectionLock);\n      },\n    };\n\n    return connectionContextBase;\n  },\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\nimport { AmqpMessageHeader } from \"./messageHeader\";\nimport { AmqpMessageProperties } from \"./messageProperties\";\nimport { Message as RheaMessage } from \"rhea-promise\";\n\n/**\n * Describes the AmqpAnnotatedMessage, part of the ServiceBusReceivedMessage(as `amqpAnnotatedMessage` property).\n */\nexport interface AmqpAnnotatedMessage {\n  /**\n   * Describes the defined set of standard header properties of the message.\n   */\n  header?: AmqpMessageHeader;\n  /**\n   * Describes set of footer properties of the message.\n   */\n  footer?: { [key: string]: any };\n  /**\n   * A dictionary containing message attributes that will be held in the message header\n   */\n  messageAnnotations?: { [key: string]: any };\n  /**\n   * A dictionary used for delivery-specific\n   * non-standard properties at the head of the message.\n   */\n  deliveryAnnotations?: { [key: string]: any };\n  /**\n   * A dictionary containing application specific message properties.\n   */\n  applicationProperties?: { [key: string]: any };\n  /**\n   *  Describes the defined set of standard properties of the message.\n   */\n  properties?: AmqpMessageProperties;\n  /**\n   * The message body.\n   */\n  body: any;\n  /**\n   * The AMQP section where the data was decoded from.\n   */\n  bodyType?: \"data\" | \"sequence\" | \"value\";\n}\n\n/**\n * Describes the operations that can be performed on(or to get) the AmqpAnnotatedMessage.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const AmqpAnnotatedMessage = {\n  /**\n   * Takes RheaMessage(`Message` type from \"rhea\") and returns it in the AmqpAnnotatedMessage format.\n   */\n  fromRheaMessage(msg: RheaMessage): AmqpAnnotatedMessage {\n    return {\n      header: AmqpMessageHeader.fromRheaMessageHeader(msg),\n      footer: (msg as any).footer,\n      messageAnnotations: msg.message_annotations,\n      deliveryAnnotations: msg.delivery_annotations,\n      applicationProperties: msg.application_properties,\n      properties: AmqpMessageProperties.fromRheaMessageProperties(msg),\n      body: msg.body,\n    };\n  },\n  /**\n   * Takes AmqpAnnotatedMessage and returns it in the RheaMessage(`Message` type from \"rhea\") format.\n   */\n  toRheaMessage(msg: AmqpAnnotatedMessage): RheaMessage {\n    const message = {\n      ...AmqpMessageProperties.toRheaMessageProperties(msg.properties || {}),\n      ...AmqpMessageHeader.toRheaMessageHeader(msg.header || {}),\n      body: msg.body,\n      message_annotations: msg.messageAnnotations,\n      delivery_annotations: msg.deliveryAnnotations,\n      application_properties: msg.applicationProperties,\n      footer: msg.footer,\n    };\n    return message;\n  },\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessToken,\n  NamedKeyCredential,\n  SASCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n} from \"@azure/core-auth\";\nimport { isObjectWithProperties } from \"../util/typeGuards\";\nimport jssha from \"jssha\";\n\n/**\n * A SasTokenProvider provides an alternative to TokenCredential for providing an `AccessToken`.\n * @hidden\n */\nexport interface SasTokenProvider {\n  /**\n   * Property used to distinguish SasTokenProvider from TokenCredential.\n   */\n  isSasTokenProvider: true;\n  /**\n   * Gets the token provided by this provider.\n   *\n   * This method is called automatically by Azure SDK client libraries.\n   *\n   * @param audience - The audience for which the token is desired.\n   */\n  getToken(audience: string): AccessToken;\n}\n\n/**\n * Creates a token provider from the provided shared access data.\n * @param data - The sharedAccessKeyName/sharedAccessKey pair or the sharedAccessSignature.\n * @hidden\n */\nexport function createSasTokenProvider(\n  data:\n    | { sharedAccessKeyName: string; sharedAccessKey: string }\n    | { sharedAccessSignature: string }\n    | NamedKeyCredential\n    | SASCredential\n): SasTokenProvider {\n  if (isNamedKeyCredential(data) || isSASCredential(data)) {\n    return new SasTokenProviderImpl(data);\n  } else if (isObjectWithProperties(data, [\"sharedAccessKeyName\", \"sharedAccessKey\"])) {\n    return new SasTokenProviderImpl({ name: data.sharedAccessKeyName, key: data.sharedAccessKey });\n  } else {\n    return new SasTokenProviderImpl({ signature: data.sharedAccessSignature });\n  }\n}\n\n/**\n * A TokenProvider that generates a Sas token:\n * `SharedAccessSignature sr=<resource>&sig=<signature>&se=<expiry>&skn=<keyname>`\n *\n * @internal\n */\nexport class SasTokenProviderImpl implements SasTokenProvider {\n  /**\n   * Property used to distinguish TokenProvider from TokenCredential.\n   */\n  get isSasTokenProvider(): true {\n    return true;\n  }\n\n  /**\n   * The SASCredential containing the key name and secret key value.\n   */\n  private _credential: SASCredential | NamedKeyCredential;\n\n  /**\n   * Initializes a new instance of SasTokenProvider\n   * @param credential - The source `NamedKeyCredential` or `SASCredential`.\n   */\n  constructor(credential: SASCredential | NamedKeyCredential) {\n    this._credential = credential;\n  }\n\n  /**\n   * Gets the sas token for the specified audience\n   * @param audience - The audience for which the token is desired.\n   */\n  getToken(audience: string): AccessToken {\n    if (isNamedKeyCredential(this._credential)) {\n      return createToken(\n        this._credential.name,\n        this._credential.key,\n        Math.floor(Date.now() / 1000) + 3600,\n        audience\n      );\n    } else {\n      return {\n        token: this._credential.signature,\n        expiresOnTimestamp: 0,\n      };\n    }\n  }\n}\n\n/**\n * Creates the sas token based on the provided information.\n * @param keyName - The shared access key name.\n * @param key - The shared access key.\n * @param expiry - The time period in unix time after which the token will expire.\n * @param audience - The audience for which the token is desired.\n * @internal\n */\nfunction createToken(keyName: string, key: string, expiry: number, audience: string): AccessToken {\n  audience = encodeURIComponent(audience);\n  keyName = encodeURIComponent(keyName);\n  const stringToSign = audience + \"\\n\" + expiry;\n\n  const shaObj = new jssha(\"SHA-256\", \"TEXT\");\n  shaObj.setHMACKey(key, \"TEXT\");\n  shaObj.update(stringToSign);\n  const sig = encodeURIComponent(shaObj.getHMAC(\"B64\"));\n  return {\n    token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,\n    expiresOnTimestamp: expiry,\n  };\n}\n"],"names":["createClientLogger","AbortError","OperationTimeoutError","ConditionErrorNameMapper","ErrorNameConditionMapper","SystemErrorConditionMapper","rheaIsAmqpError","ReceiverEvents","generate_uuid","dnsResolve","CONNREFUSED","TIMEOUT","RetryMode","RetryOperationType","TokenType","SenderEvents","os","Connection","isNamedKeyCredential","isSASCredential","jssha"],"mappings":"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"}