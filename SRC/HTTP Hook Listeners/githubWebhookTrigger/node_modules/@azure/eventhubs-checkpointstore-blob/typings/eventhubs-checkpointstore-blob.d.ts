import { Checkpoint } from '@azure/event-hubs';
import { CheckpointStore } from '@azure/event-hubs';
import { ContainerClient } from '@azure/storage-blob';
import { PartitionOwnership } from '@azure/event-hubs';

/**
 * An implementation of CheckpointStore that uses Azure Blob Storage to persist checkpoint data.
 * @class
 */
export declare class BlobCheckpointStore implements CheckpointStore {
    private _containerClient;
    constructor(containerClient: ContainerClient);
    /**
     * Get the list of all existing partition ownership from the underlying data store. May return empty
     * results if there are is no existing ownership information.
     * Partition Ownership contains the information on which `EventHubConsumerClient` subscribe call is currently processing the partition.
     *
     * @param fullyQualifiedNamespace The fully qualified Event Hubs namespace. This is likely to be similar to
     * <yournamespace>.servicebus.windows.net.
     * @param eventHubName The event hub name.
     * @param consumerGroup The consumer group name.
     * @return Partition ownership details of all the partitions that have had an owner.
     */
    listOwnership(fullyQualifiedNamespace: string, eventHubName: string, consumerGroup: string): Promise<PartitionOwnership[]>;
    /**
     * Claim ownership of a list of partitions. This will return the list of partitions that were
     * successfully claimed.
     *
     * @param partitionOwnership The list of partition ownership this instance is claiming to own.
     * @return A list partitions this instance successfully claimed ownership.
     */
    claimOwnership(partitionOwnership: PartitionOwnership[]): Promise<PartitionOwnership[]>;
    /**
     * Lists all the checkpoints in a data store for a given namespace, eventhub and consumer group.
     *
     * @param fullyQualifiedNamespace The fully qualified Event Hubs namespace. This is likely to be similar to
     * <yournamespace>.servicebus.windows.net.
     * @param eventHubName The event hub name.
     * @param consumerGroup The consumer group name.
     */
    listCheckpoints(fullyQualifiedNamespace: string, eventHubName: string, consumerGroup: string): Promise<Checkpoint[]>;
    /**
     * Updates the checkpoint in the data store for a partition.
     *
     * @param checkpoint The checkpoint.
     * @return The new etag on successful update.
     */
    updateCheckpoint(checkpoint: Checkpoint): Promise<void>;
    private static getBlobPrefix;
    private _setBlobMetadata;
}

/**
 * The @azure/logger configuration for this package.
 * This will output logs using the `azure:eventhubs-checkpointstore-blob` namespace prefix.
 */
export declare const logger: import("@azure/logger").AzureLogger;

export { }
