package com.ringtaillemur.analyst.query;
//test 3
public class OlapQuery {
	public static final String MAKE_LEAD_TIME_FOR_CHANGE = "BEGIN TRAN\n"
		+ "\n"
		+ "\n"
		+ "INSERT INTO lead_time_for_change\n"
		+ "(pull_request_id, first_commit_time, first_review_time, pr_close_time, pr_open_time, repository_id)\n"
		+ "SELECT target_pr.pr_id           AS pull_request_id,\n"
		+ "       commits.first_commit_time AS first_commit_time,\n"
		+ "       review.first_review_time  AS first_review_time,\n"
		+ "       target_pr.pr_close_time   AS pr_close_time,\n"
		+ "       pre.event_time            AS pr_open_time,\n"
		+ "       target_pr.repo_id         as repository_id\n"
		+ "FROM (SELECT pr.pull_request_id  AS pr_id,\n"
		+ "             pr_event.event_time AS pr_close_time,\n"
		+ "             pr.repository_id    as repo_id\n"
		+ "      FROM pull_request_event pr_event\n"
		+ "               JOIN pull_request pr\n"
		+ "                    ON pr_event.pull_request_id = pr.pull_request_id\n"
		+ "               LEFT JOIN\n"
		+ "           (SELECT prd.outgoing_pull_request_id      AS pr_id,\n"
		+ "                   count(prd.source_pull_request_id) AS source_count\n"
		+ "            FROM pull_request_direction prd\n"
		+ "            WHERE prd.lead_time_for_change_process_end = 0\n"
		+ "            GROUP BY prd.outgoing_pull_request_id) pr_source\n"
		+ "           ON pr_source.pr_id = pr.pull_request_id\n"
		+ "      WHERE pr_event.pull_request_event_type = 'CLOSED'\n"
		+ "        AND pr.lead_time_for_change_process_end = 0\n"
		+ "        AND pr_source.source_count IS NULL) target_pr\n"
		+ "         JOIN\n"
		+ "     (SELECT pull_request_id AS pr_id, MIN(pr_comment.event_time) first_review_time\n"
		+ "      FROM pull_request_comment pr_comment\n"
		+ "      GROUP BY pull_request_id) review\n"
		+ "     ON target_pr.pr_id = review.pr_id\n"
		+ "         JOIN\n"
		+ "     (SELECT pr_commit_table.pull_request_id as pr_id, min(c.commit_time) as first_commit_time\n"
		+ "          FROM pull_request_commit_table pr_commit_table\n"
		+ "              join commits c on pr_commit_table.commit_id = c.commit_id\n"
		+ "          GROUP BY pr_commit_table.pull_request_id) commits\n"
		+ "     ON target_pr.pr_id = commits.pr_id\n"
		+ "         JOIN\n"
		+ "     pull_request_event pre\n"
		+ "     ON pre.pull_request_id = target_pr.pr_id and pre.pull_request_event_type = 'OPENED';\n"
		+ "\n"
		+ "UPDATE pull_request\n"
		+ "set lead_time_for_change_process_end = 1\n"
		+ "where lead_time_for_change_process_end = 0\n"
		+ "\n"
		+ "UPDATE pull_request_direction\n"
		+ "set lead_time_for_change_process_end = 1\n"
		+ "where lead_time_for_change_process_end = 0\n"
		+ "\n"
		+ "COMMIT TRAN\n"
		+ "\n";
	public static final String MAKE_DEPLOY_TIME = "WITH target_release AS (SELECT distinct release.release_id\n"
		+ "                                      , release.published_at\n"
		+ "                        FROM release\n"
		+ "                                 JOIN release_event ON release.release_id = release_event.release_id\n"
		+ "                        WHERE release.lead_time_for_change_process_end = 0),\n"
		+ "     target_commits AS\n"
		+ "         (SELECT commits.commit_id, commits.release_id, target_release.published_at\n"
		+ "          FROM commits\n"
		+ "                   JOIN target_release ON target_release.release_id = commits.release_id),\n"
		+ "     commits_ranked_by_event_time AS\n"
		+ "         (select dprct.commit_id                                                   commit_id\n"
		+ "               , DENSE_RANK() over (PARTITION BY commit_id order by event_time) AS ranking\n"
		+ "               , pr.pull_request_id                                                pr_id\n"
		+ "               , event_time\n"
		+ "          from pull_request_commit_table dprct\n"
		+ "                   JOIN pull_request pr\n"
		+ "                        ON dprct.pull_request_id = pr.pull_request_id\n"
		+ "                   JOIN pull_request_event pre\n"
		+ "                        ON pr.pull_request_id = pre.pull_request_id\n"
		+ "          WHERE pre.pull_request_event_type = 'CLOSED'),\n"
		+ "     commits_first_pr AS (select commit_id, pr_id, event_time\n"
		+ "                          from commits_ranked_by_event_time\n"
		+ "                          WHERE ranking = 1)\n"
		+ "\n"
		+ "UPDATE lead_time_for_change\n"
		+ "\n"
		+ "SET lead_time_for_change.deployment_time = deployment_time.et,\n"
		+ "    lead_time_for_change.release_id      = deployment_time.ri\n"
		+ "FROM lead_time_for_change,\n"
		+ "     (select distinct commits_first_pr.pr_id      pr_id,\n"
		+ "                      target_commits.published_at et,\n"
		+ "                      target_commits.release_id   ri\n"
		+ "      from commits_first_pr\n"
		+ "               JOIN target_commits\n"
		+ "                    ON commits_first_pr.commit_id = target_commits.commit_id) AS deployment_time\n"
		+ "where deployment_time.pr_id = lead_time_for_change.pull_request_id\n"
		+ "\n"
		+ "\n"
		+ "UPDATE release\n"
		+ "SET lead_time_for_change_process_end = 1\n"
		+ "where lead_time_for_change_process_end = 0";
	public static final String MAKE_CHANGE_FAILURE_RATE = "INSERT INTO release_success(release_id, repository_id)\n"
		+ "SELECT release_id, release.repository_id\n"
		+ "FROM release\n"
		+ "WHERE change_failure_rate_process_end = 0;\n"
		+ "\n"
		+ "UPDATE release\n"
		+ "SET change_failure_rate_process_end = 1\n"
		+ "WHERE change_failure_rate_process_end = 0;\n"
		+ "\n"
		+ "\n"
		+ "\n"
		+ "UPDATE release_success\n"
		+ "SET release_success.failed_at = ie.event_time,\n"
		+ "    first_error_issue_id      = ie.issue_id,\n"
		+ "    release_success.is_success= 0\n"
		+ "FROM release_success\n"
		+ "         JOIN issue_label il ON release_success.release_id = il.release_id\n"
		+ "         JOIN issue i ON i.issue_label_id = il.issue_label_id\n"
		+ "         JOIN issue_event ie ON ie.issue_id = i.issue_id\n"
		+ "WHERE release_success.is_success = 1\n"
		+ "  AND i.failed_change_process_end = 0\n"
		+ "  AND ie.issue_event_type = 'OPEN'\n"
		+ "\n"
		+ "UPDATE issue\n"
		+ "set failed_change_process_end = 1\n"
		+ "where failed_change_process_end = 0\n";
	public static final String MAKE_TIME_TO_RESTORE_SERVICE = "with closed_issue as\n"
		+ "         (select release_success_id, event_time as closed_issue_event_time\n"
		+ "          from release_success\n"
		+ "                   JOIN issue_event ON release_success.first_error_issue_id = issue_event.issue_id\n"
		+ "          where issue_event_type = 'CLOSED'),\n"
		+ "     opened_issue as\n"
		+ "         (select release_success_id,\n"
		+ "                 event_time as opened_issue_event_time,\n"
		+ "                 time_to_restore_service_process_end\n"
		+ "          from release_success\n"
		+ "                   JOIN issue_event ON release_success.first_error_issue_id = issue_event.issue_id\n"
		+ "          where issue_event_type = 'OPEN')\n"
		+ "\n"
		+ "\n"
		+ "INSERT\n"
		+ "INTO time_to_restore_service (release_success_id, restore_service_time, restored_at)\n"
		+ "SELECT closed_issue.release_success_id,\n"
		+ "       DATEDIFF(minute, opened_issue.opened_issue_event_time,\n"
		+ "                closed_issue.closed_issue_event_time) as restore_service_time,\n"
		+ "       closed_issue.closed_issue_event_time\n"
		+ "FROM closed_issue\n"
		+ "         join opened_issue\n"
		+ "              on closed_issue.release_success_id = opened_issue.release_success_id\n"
		+ "WHERE time_to_restore_service_process_end = 0;\n"
		+ "\n"
		+ "UPDATE release_success\n"
		+ "SET release_success.time_to_restore_service_process_end = 1\n"
		+ "FROM issue_event JOIN release_success ON release_success.first_error_issue_id = issue_event.issue_id\n"
		+ "WHERE time_to_restore_service_process_end = 0\n"
		+ "  AND issue_event_type = 'CLOSED'\n";
}
