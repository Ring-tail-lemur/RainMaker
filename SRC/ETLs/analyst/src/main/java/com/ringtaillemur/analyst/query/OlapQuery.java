package com.ringtaillemur.analyst.query;

public class OlapQuery {
	public static final String MAKE_LEAD_TIME_FOR_CHANGE = "BEGIN TRAN\n"
		+ "\n"
		+ "\n"
		+ "INSERT INTO lead_time_for_change\n"
		+ "(pull_request_id, first_commit_time, first_review_time, pr_close_time, pr_open_time, repository_id)\n"
		+ "SELECT target_pr.pr_id           AS pull_request_id,\n"
		+ "       commits.first_commit_time AS first_commit_time,\n"
		+ "       review.first_review_time  AS first_review_time,\n"
		+ "       target_pr.pr_close_time   AS pr_close_time,\n"
		+ "       pre.event_time            AS pr_open_time,\n"
		+ "       target_pr.repo_id         as repository_id\n"
		+ "FROM (SELECT pr.pull_request_id  AS pr_id,\n"
		+ "             pr_event.event_time AS pr_close_time,\n"
		+ "             pr.repository_id    as repo_id\n"
		+ "      FROM pull_request_event pr_event\n"
		+ "               JOIN pull_request pr\n"
		+ "                    ON pr_event.pull_request_id = pr.pull_request_id\n"
		+ "               LEFT JOIN\n"
		+ "           (SELECT prd.outgoing_pull_request_id      AS pr_id,\n"
		+ "                   count(prd.source_pull_request_id) AS source_count\n"
		+ "            FROM pull_request_direction prd\n"
		+ "            WHERE prd.process_end = 0\n"
		+ "            GROUP BY prd.outgoing_pull_request_id) pr_source\n"
		+ "           ON pr_source.pr_id = pr.pull_request_id\n"
		+ "      WHERE pr_event.event_type = 'CLOSED'\n"
		+ "        AND pr.process_end = 0\n"
		+ "        AND pr_source.source_count IS NULL) target_pr\n"
		+ "         JOIN\n"
		+ "     (SELECT pull_request_id AS pr_id, MIN(pr_comment.event_time) first_review_time\n"
		+ "      FROM pull_request_comment pr_comment\n"
		+ "      GROUP BY pull_request_id) review\n"
		+ "     ON target_pr.pr_id = review.pr_id\n"
		+ "         JOIN\n"
		+ "     (SELECT pr_commit_table.pull_request_id AS pr_id, c.commit_time AS first_commit_time\n"
		+ "      FROM pull_request_commit_table pr_commit_table\n"
		+ "               JOIN commits c\n"
		+ "                    ON pr_commit_table.commit_id = c.commit_id\n"
		+ "      where pr_commit_table.first_commit = 1) commits\n"
		+ "     ON target_pr.pr_id = commits.pr_id\n"
		+ "         JOIN\n"
		+ "     pull_request_event pre\n"
		+ "     ON pre.pull_request_id = target_pr.pr_id and pre.event_type = 'OPENED';\n"
		+ "\n"
		+ "UPDATE pull_request\n"
		+ "set process_end = 1\n"
		+ "where process_end = 0\n"
		+ "\n"
		+ "COMMIT TRAN\n";
	public static final String MAKE_DEPLOY_TIME = "BEGIN TRAN\n"
		+ "\n"
		+ "\n"
		+ "update lead_time_for_change\n"
		+ "set lead_time_for_change.deployment_time     = deployment_time.et,\n"
		+ "    lead_time_for_change.deployment_event_id = deployment_time.wr_id\n"
		+ "FROM lead_time_for_change,\n"
		+ "     (select distinct my_table.pr_id                pr_id,\n"
		+ "                      my_table.event_time           et,\n"
		+ "                      target_commit.workflow_run_id wr_id\n"
		+ "      from (select dprct.commit_id                                                   commit_id\n"
		+ "                 , DENSE_RANK() over (PARTITION BY commit_id order by event_time) as ranking\n"
		+ "                 , pr.pull_request_id                                                pr_id\n"
		+ "                 , event_time\n"
		+ "            from pull_request_commit_table dprct\n"
		+ "                     join pull_request pr\n"
		+ "                          on dprct.pull_request_id = pr.pull_request_id\n"
		+ "                     join pull_request_event pre\n"
		+ "                          on pr.pull_request_id = pre.pull_request_id\n"
		+ "            where pre.event_type = 'CLOSED') my_table\n"
		+ "               join (select prct.commit_id as commit_id,\n"
		+ "                            wr.workflow_run_id\n"
		+ "                     from workflow_run wr\n"
		+ "                              join pull_request_commit_table prct\n"
		+ "                                   on wr.pull_request_id = prct.pull_request_id\n"
		+ "                     where wr.process_end = 0) target_commit\n"
		+ "                    on my_table.commit_id = target_commit.commit_id\n"
		+ "      where ranking = 1) as deployment_time\n"
		+ "where deployment_time.pr_id = lead_time_for_change.pull_request_id\n"
		+ "\n"
		+ "\n"
		+ "UPDATE pull_request\n"
		+ "set process_end = 1\n"
		+ "where process_end = 0\n"
		+ "\n"
		+ "\n"
		+ "COMMIT TRAN\n";
}
