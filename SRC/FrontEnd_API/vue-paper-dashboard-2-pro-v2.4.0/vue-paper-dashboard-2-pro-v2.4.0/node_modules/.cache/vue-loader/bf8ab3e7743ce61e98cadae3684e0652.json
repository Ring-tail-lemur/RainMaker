{"remainingRequest":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/src/components/UIComponents/Inputs/formGroupInput.vue?vue&type=style&index=0&id=ea842880&scoped=true&lang=css&","dependencies":[{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/src/components/UIComponents/Inputs/formGroupInput.vue","mtime":1664168527775},{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/css-loader/dist/cjs.js","mtime":1664435185677},{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1664435186093},{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/postcss-loader/src/index.js","mtime":1664435185743},{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/cache-loader/dist/cjs.js","mtime":1664435185541},{"path":"/Users/vidigummy/workspace/RainMaker/SRC/FrontEnd_API/vue-paper-dashboard-2-pro-v2.4.0/vue-paper-dashboard-2-pro-v2.4.0/node_modules/vue-loader/lib/index.js","mtime":1664435186048}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZXJyb3ItdGV4dCB7CiAgZGlzcGxheTogYmxvY2s7Cn0K"},{"version":3,"sources":["formGroupInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA","file":"formGroupInput.vue","sourceRoot":"src/components/UIComponents/Inputs","sourcesContent":["<template>\n  <div class=\"form-group\"\n       :class=\"[\n       {'input-group': hasIcon},\n       {'has-danger': error},\n       {'input-group-focus': focused},\n       {'has-label': label || $slots.label},\n       {'has-success': hasSuccess}]\">\n    <slot name=\"label\">\n      <label v-if=\"label\" :class=\"labelClasses\">\n        {{label}}\n        <span class=\"text-danger\" v-if=\"required\">*</span>\n      </label>\n    </slot>\n\n\n    <div v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\">\n          <slot name=\"addonLeft\">\n            <i :class=\"addonLeftIcon\"></i>\n          </slot>\n        </span>\n    </div>\n    <slot>\n      <input\n        :value=\"value\"\n        v-on=\"listeners\"\n        v-bind=\"$attrs\"\n        class=\"form-control\"\n        :required=\"required\"\n        :class=\"[{'is-valid': hasSuccess}, inputClasses, {'is-invalid': error}]\"\n        aria-describedby=\"addon-right addon-left\">\n    </slot>\n    <div v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-append\">\n          <span class=\"input-group-text\">\n              <slot name=\"addonRight\">\n                  <i :class=\"addonRightIcon\"></i>\n              </slot>\n          </span>\n    </div>\n    <slot name=\"infoBlock\"></slot>\n    <slot name=\"helpBlock\">\n      <div class=\"invalid-feedback error-text\" :class=\"{'mt-2': hasIcon}\" v-if=\"error\">\n        {{ error }}\n      </div>\n    </slot>\n  </div>\n</template>\n<script>\n  export default {\n    inheritAttrs: false,\n    name: 'fg-input',\n    props: {\n      required: {\n        type: Boolean,\n        description: 'Whether input is required (adds an asterix *)'\n      },\n      label: {\n        type: String,\n        description: 'Input label (text before input)'\n      },\n      error: {\n        type: String,\n        description: 'Input error (below input)'\n      },\n      labelClasses: {\n        type: String,\n        description: 'Input label css classes'\n      },\n      inputClasses: {\n        type: String,\n        description: 'Input css classes'\n      },\n      value: {\n        type: [String, Number],\n        description: 'Input value'\n      },\n      addonRightIcon: {\n        type: String,\n        description: 'Addon right icon'\n      },\n      addonLeftIcon: {\n        type: String,\n        description: 'Addont left icon'\n      }\n    },\n    data() {\n      return {\n        touched: false,\n        focused: false,\n        hadError: false\n      }\n    },\n    computed: {\n      listeners() {\n        return {\n          ...this.$listeners,\n          input: this.updateValue,\n          focus: this.onFocus,\n          blur: this.onBlur\n        }\n      },\n      hasSuccess() {\n        return this.hadError && this.touched && !this.error\n      },\n      hasIcon() {\n        const { addonRight, addonLeft } = this.$slots\n        return addonRight !== undefined || addonLeft !== undefined || this.addonRightIcon !== undefined || this.addonLeftIcon !== undefined\n      }\n    },\n    methods: {\n      updateValue(evt) {\n        let value = evt.target.value\n        if (!this.touched && value) {\n          this.touched = true\n        }\n        this.$emit('input', value)\n      },\n      onFocus(value) {\n        this.focused = true;\n        this.$emit('focus', value);\n      },\n      onBlur(value) {\n        this.focused = false;\n        this.$emit('blur', value);\n      }\n    },\n    created() {\n      this.$watch('error', (newVal) => {\n        if(newVal){\n          this.hadError = true;\n        }\n      }, {immediate: true})\n    }\n  }\n</script>\n<style scoped>\n.error-text {\n  display: block;\n}\n</style>\n"]}]}